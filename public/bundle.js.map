{"version":3,"file":"bundle.js","sources":["../node_modules/cm-chessboard/src/model/Position.js","../node_modules/cm-chessboard/src/model/ChessboardState.js","../node_modules/cm-chessboard/src/lib/Svg.js","../node_modules/cm-chessboard/src/model/Extension.js","../node_modules/cm-chessboard/src/lib/Utils.js","../node_modules/cm-chessboard/src/view/PositionAnimationsQueue.js","../node_modules/cm-chessboard/src/view/VisualMoveInput.js","../node_modules/cm-chessboard/src/view/ChessboardView.js","../node_modules/cm-chessboard/src/Chessboard.js","../node_modules/chess.js/dist/esm/chess.js","../src/components/Chessboard.js","../src/main.js"],"sourcesContent":["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nexport const FEN = {\n    start: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n    empty: \"8/8/8/8/8/8/8/8\"\n}\n\nexport class Position {\n\n    constructor(fen = FEN.empty) {\n        this.squares = new Array(64).fill(null)\n        this.setFen(fen)\n    }\n\n    setFen(fen = FEN.empty) {\n        const parts = fen.replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").split(/\\/|\\s/)\n        for (let part = 0; part < 8; part++) {\n            const row = parts[7 - part].replace(/\\d/g, (str) => {\n                const numSpaces = parseInt(str)\n                let ret = ''\n                for (let i = 0; i < numSpaces; i++) {\n                    ret += '-'\n                }\n                return ret\n            })\n            for (let c = 0; c < 8; c++) {\n                const char = row.substring(c, c + 1)\n                let piece = null\n                if (char !== '-') {\n                    if (char.toUpperCase() === char) {\n                        piece = `w${char.toLowerCase()}`\n                    } else {\n                        piece = `b${char}`\n                    }\n                }\n                this.squares[part * 8 + c] = piece\n            }\n        }\n    }\n\n    getFen() {\n        let parts = new Array(8).fill(\"\")\n        for (let part = 0; part < 8; part++) {\n            let spaceCounter = 0\n            for (let i = 0; i < 8; i++) {\n                const piece = this.squares[part * 8 + i]\n                if (!piece) {\n                    spaceCounter++\n                } else {\n                    if (spaceCounter > 0) {\n                        parts[7 - part] += spaceCounter\n                        spaceCounter = 0\n                    }\n                    const color = piece.substring(0, 1)\n                    const name = piece.substring(1, 2)\n                    if (color === \"w\") {\n                        parts[7 - part] += name.toUpperCase()\n                    } else {\n                        parts[7 - part] += name\n                    }\n                }\n            }\n            if (spaceCounter > 0) {\n                parts[7 - part] += spaceCounter\n                spaceCounter = 0\n            }\n        }\n        return parts.join(\"/\")\n    }\n\n    getPieces(pieceColor = undefined, pieceType = undefined, sortBy = ['k', 'q', 'r', 'b', 'n', 'p']) {\n        const pieces = []\n        const sort = (a, b) => {\n            return sortBy.indexOf(a.name) - sortBy.indexOf(b.name)\n        }\n        for (let i = 0; i < 64; i++) {\n            const piece = this.squares[i]\n            if (piece) {\n                const type = piece.charAt(1)\n                const color = piece.charAt(0)\n                const square = Position.indexToSquare(i)\n                if(pieceType && pieceType !== type || pieceColor && pieceColor !== color) {\n                    continue\n                }\n                pieces.push({\n                    name: type, // deprecated, use type\n                    type: type,\n                    color: color,\n                    position: square, // deprecated, use square\n                    square: square\n                })\n            }\n        }\n        if (sortBy) {\n            pieces.sort(sort)\n        }\n        return pieces\n    }\n\n    movePiece(squareFrom, squareTo) {\n        if (!this.squares[Position.squareToIndex(squareFrom)]) {\n            console.warn(\"no piece on\", squareFrom)\n            return\n        }\n        this.squares[Position.squareToIndex(squareTo)] = this.squares[Position.squareToIndex(squareFrom)]\n        this.squares[Position.squareToIndex(squareFrom)] = null\n    }\n\n    setPiece(square, piece) {\n        this.squares[Position.squareToIndex(square)] = piece\n    }\n\n    getPiece(square) {\n        return this.squares[Position.squareToIndex(square)]\n    }\n\n    static squareToIndex(square) {\n        const coordinates = Position.squareToCoordinates(square)\n        return coordinates[0] + coordinates[1] * 8\n    }\n\n    static indexToSquare(index) {\n        return this.coordinatesToSquare([Math.floor(index % 8), index / 8])\n    }\n\n    static squareToCoordinates(square) {\n        const file = square.charCodeAt(0) - 97\n        const rank = square.charCodeAt(1) - 49\n        return [file, rank]\n    }\n\n    static coordinatesToSquare(coordinates) {\n        const file = String.fromCharCode(coordinates[0] + 97)\n        const rank = String.fromCharCode(coordinates[1] + 49)\n        return file + rank\n    }\n\n    toString() {\n        return this.getFen()\n    }\n\n    clone() {\n        const cloned = new Position()\n        cloned.squares = this.squares.slice(0)\n        return cloned\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {Position} from \"./Position.js\"\n\nexport class ChessboardState {\n\n    constructor() {\n        this.position = new Position()\n        this.orientation = undefined\n        this.inputWhiteEnabled = false\n        this.inputBlackEnabled = false\n        this.squareSelectEnabled = false\n        this.moveInputCallback = null\n        this.extensionPoints = {}\n        this.moveInputProcess = Promise.resolve()\n    }\n\n    inputEnabled() {\n        return this.inputWhiteEnabled || this.inputBlackEnabled\n    }\n\n    invokeExtensionPoints(name, data = {}) {\n        const extensionPoints = this.extensionPoints[name]\n        const dataCloned = Object.assign({}, data)\n        dataCloned.extensionPoint = name\n        let returnValue = true\n        if (extensionPoints) {\n            for (const extensionPoint of extensionPoints) {\n                if(extensionPoint(dataCloned) === false) {\n                    returnValue = false\n                }\n            }\n        }\n        return returnValue\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\"\n\nexport class Svg {\n\n    /**\n     * create the Svg in the HTML DOM\n     * @param containerElement\n     * @returns {Element}\n     */\n    static createSvg(containerElement = undefined) {\n        let svg = document.createElementNS(SVG_NAMESPACE, \"svg\")\n        if (containerElement) {\n            svg.setAttribute(\"width\", \"100%\")\n            svg.setAttribute(\"height\", \"100%\")\n            containerElement.appendChild(svg)\n        }\n        return svg\n    }\n\n    /**\n     * Add an Element to an SVG DOM\n     * @param parent\n     * @param name\n     * @param attributes\n     * @returns {Element}\n     */\n    static addElement(parent, name, attributes = {}) {\n        let element = document.createElementNS(SVG_NAMESPACE, name)\n        if (name === \"use\") {\n            attributes[\"xlink:href\"] = attributes[\"href\"] // fix for safari\n        }\n        for (let attribute in attributes) {\n            if (attributes.hasOwnProperty(attribute)) {\n                if (attribute.indexOf(\":\") !== -1) {\n                    const value = attribute.split(\":\")\n                    element.setAttributeNS(\"http://www.w3.org/1999/\" + value[0], value[1], attributes[attribute])\n                } else {\n                    element.setAttribute(attribute, attributes[attribute])\n                }\n            }\n        }\n        parent.appendChild(element)\n        return element\n    }\n\n    /**\n     * Remove an element from an SVG DOM\n     * @param element\n     */\n    static removeElement(element) {\n        if(!element) {\n            console.warn(\"removeElement, element is\", element)\n            return\n        }\n        if (element.parentNode) {\n            element.parentNode.removeChild(element)\n        } else {\n            console.warn(element, \"without parentNode\")\n        }\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport const EXTENSION_POINT = {\n    positionChanged: \"positionChanged\", // the positions of the pieces was changed\n    boardChanged: \"boardChanged\", // the board (orientation) was changed\n    moveInputToggled: \"moveInputToggled\", // move input was enabled or disabled\n    moveInput: \"moveInput\", // move started, moving over a square, validating or canceled\n    beforeRedrawBoard: \"beforeRedrawBoard\", // called before redrawing the board\n    afterRedrawBoard: \"afterRedrawBoard\", // called after redrawing the board\n    redrawBoard: \"redrawBoard\", // called after redrawing the board, DEPRECATED, use afterRedrawBoard 2023-09-18\n    animation: \"animation\", // called on animation start, end, and on every animation frame\n    destroy: \"destroy\" // called, before the board is destroyed\n}\n\nexport class Extension {\n\n    constructor(chessboard) {\n        this.chessboard = chessboard\n    }\n\n    registerExtensionPoint(name, callback) {\n        if(name === EXTENSION_POINT.redrawBoard) { // deprecated 2023-09-18\n            console.warn(\"EXTENSION_POINT.redrawBoard is deprecated, use EXTENSION_POINT.afterRedrawBoard\")\n            name = EXTENSION_POINT.afterRedrawBoard\n        }\n        if (!this.chessboard.state.extensionPoints[name]) {\n            this.chessboard.state.extensionPoints[name] = []\n        }\n        this.chessboard.state.extensionPoints[name].push(callback)\n    }\n\n    /** @deprecated 2023-05-18 */\n    registerMethod(name, callback) {\n        console.warn(\"registerMethod is deprecated, just add methods directly to the chessboard instance\")\n        if (!this.chessboard[name]) {\n            this.chessboard[name] = (...args) => {\n                return callback.apply(this, args)\n            }\n        } else {\n            log.error(\"method\", name, \"already exists\")\n        }\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport class Utils {\n\n    static delegate(element, eventName, selector, handler) {\n        const eventListener = function (event) {\n            let target = event.target\n            while (target && target !== this) {\n                if (target.matches(selector)) {\n                    handler.call(target, event)\n                }\n                target = target.parentNode\n            }\n        }\n        element.addEventListener(eventName, eventListener)\n        return {\n            remove: function () {\n                element.removeEventListener(eventName, eventListener)\n            }\n        }\n    }\n\n    static mergeObjects(target, source) {\n        const isObject = (obj) => obj && typeof obj === 'object'\n        if (!isObject(target) || !isObject(source)) {\n            return source\n        }\n        for (const key of Object.keys(source)) {\n            if (source[key] instanceof Object) {\n                Object.assign(source[key], Utils.mergeObjects(target[key], source[key]))\n            }\n        }\n        Object.assign(target || {}, source)\n        return target\n    }\n\n    static createDomElement(html) {\n        const template = document.createElement('template')\n        template.innerHTML = html.trim()\n        return template.content.firstChild\n    }\n\n    static createTask() {\n        let resolve, reject\n        const promise = new Promise(function (_resolve, _reject) {\n            resolve = _resolve\n            reject = _reject\n        })\n        promise.resolve = resolve\n        promise.reject = reject\n        return promise\n    }\n\n    static isAbsoluteUrl(url) {\n        return url.indexOf(\"://\") !== -1 || url.startsWith(\"/\")\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {FEN, Position} from \"../model/Position.js\"\nimport {Svg} from \"../lib/Svg.js\"\nimport {EXTENSION_POINT} from \"../model/Extension.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\n/*\n* Thanks to markosyan for the idea of the PromiseQueue\n* https://medium.com/@karenmarkosyan/how-to-manage-promises-into-dynamic-queue-with-vanilla-javascript-9d0d1f8d4df5\n*/\n\nexport const ANIMATION_EVENT_TYPE = {\n    start: \"start\",\n    frame: \"frame\",\n    end: \"end\"\n}\n\nexport class PromiseQueue {\n\n    constructor() {\n        this.queue = []\n        this.workingOnPromise = false\n        this.stop = false\n    }\n\n    async enqueue(promise) {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                promise, resolve, reject,\n            })\n            this.dequeue()\n        })\n    }\n\n    dequeue() {\n        if (this.workingOnPromise) {\n            return\n        }\n        if (this.stop) {\n            this.queue = []\n            this.stop = false\n            return\n        }\n        const entry = this.queue.shift()\n        if (!entry) {\n            return\n        }\n        try {\n            this.workingOnPromise = true\n            entry.promise().then((value) => {\n                this.workingOnPromise = false\n                entry.resolve(value)\n                this.dequeue()\n            }).catch(err => {\n                this.workingOnPromise = false\n                entry.reject(err)\n                this.dequeue()\n            })\n        } catch (err) {\n            this.workingOnPromise = false\n            entry.reject(err)\n            this.dequeue()\n        }\n        return true\n    }\n\n    destroy() {\n        this.stop = true\n    }\n\n}\n\n\nconst CHANGE_TYPE = {\n    move: 0,\n    appear: 1,\n    disappear: 2\n}\n\nexport class PositionsAnimation {\n\n    constructor(view, fromPosition, toPosition, duration, callback) {\n        this.view = view\n        if (fromPosition && toPosition) {\n            this.animatedElements = this.createAnimation(fromPosition.squares, toPosition.squares)\n            this.duration = duration\n            this.callback = callback\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            console.error(\"fromPosition\", fromPosition, \"toPosition\", toPosition)\n        }\n        this.view.positionsAnimationTask = Utils.createTask()\n        this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n            type: ANIMATION_EVENT_TYPE.start\n        })\n    }\n\n    static seekChanges(fromSquares, toSquares) {\n        const appearedList = [], disappearedList = [], changes = []\n        for (let i = 0; i < 64; i++) {\n            const previousSquare = fromSquares[i]\n            const newSquare = toSquares[i]\n            if (newSquare !== previousSquare) {\n                if (newSquare) {\n                    appearedList.push({piece: newSquare, index: i})\n                }\n                if (previousSquare) {\n                    disappearedList.push({piece: previousSquare, index: i})\n                }\n            }\n        }\n        appearedList.forEach((appeared) => {\n            let shortestDistance = 8\n            let foundMoved = null\n            disappearedList.forEach((disappeared) => {\n                if (appeared.piece === disappeared.piece) {\n                    const moveDistance = PositionsAnimation.squareDistance(appeared.index, disappeared.index)\n                    if (moveDistance < shortestDistance) {\n                        foundMoved = disappeared\n                        shortestDistance = moveDistance\n                    }\n                }\n            })\n            if (foundMoved) {\n                disappearedList.splice(disappearedList.indexOf(foundMoved), 1) // remove from disappearedList, because it is moved now\n                changes.push({\n                    type: CHANGE_TYPE.move,\n                    piece: appeared.piece,\n                    atIndex: foundMoved.index,\n                    toIndex: appeared.index\n                })\n            } else {\n                changes.push({type: CHANGE_TYPE.appear, piece: appeared.piece, atIndex: appeared.index})\n            }\n        })\n        disappearedList.forEach((disappeared) => {\n            changes.push({type: CHANGE_TYPE.disappear, piece: disappeared.piece, atIndex: disappeared.index})\n        })\n        return changes\n    }\n\n    createAnimation(fromSquares, toSquares) {\n        const changes = PositionsAnimation.seekChanges(fromSquares, toSquares)\n        const animatedElements = []\n        changes.forEach((change) => {\n            const animatedItem = {\n                type: change.type\n            }\n            switch (change.type) {\n                case CHANGE_TYPE.move:\n                    animatedItem.element = this.view.getPieceElement(Position.indexToSquare(change.atIndex))\n                    animatedItem.element.parentNode.appendChild(animatedItem.element) // move element to top layer\n                    animatedItem.atPoint = this.view.indexToPoint(change.atIndex)\n                    animatedItem.toPoint = this.view.indexToPoint(change.toIndex)\n                    break\n                case CHANGE_TYPE.appear:\n                    animatedItem.element = this.view.drawPieceOnSquare(Position.indexToSquare(change.atIndex), change.piece)\n                    animatedItem.element.style.opacity = 0\n                    break\n                case CHANGE_TYPE.disappear:\n                    animatedItem.element = this.view.getPieceElement(Position.indexToSquare(change.atIndex))\n                    break\n            }\n            animatedElements.push(animatedItem)\n        })\n        return animatedElements\n    }\n\n    animationStep(time) {\n        if(!this.view || !this.view.chessboard.state) { // board was destroyed\n            return\n        }\n        if (!this.startTime) {\n            this.startTime = time\n        }\n        const timeDiff = time - this.startTime\n        if (timeDiff <= this.duration) {\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            cancelAnimationFrame(this.frameHandle)\n            this.animatedElements.forEach((animatedItem) => {\n                if (animatedItem.type === CHANGE_TYPE.disappear) {\n                    Svg.removeElement(animatedItem.element)\n                }\n            })\n            this.view.positionsAnimationTask.resolve()\n            this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n                type: ANIMATION_EVENT_TYPE.end\n            })\n            this.callback()\n            return\n        }\n        const t = Math.min(1, timeDiff / this.duration)\n        let progress = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t // easeInOut\n        if (isNaN(progress) || progress > 0.99) {\n            progress = 1\n        }\n        this.animatedElements.forEach((animatedItem) => {\n            if (animatedItem.element) {\n                switch (animatedItem.type) {\n                    case CHANGE_TYPE.move:\n                        animatedItem.element.transform.baseVal.removeItem(0)\n                        const transform = (this.view.svg.createSVGTransform())\n                        transform.setTranslate(\n                            animatedItem.atPoint.x + (animatedItem.toPoint.x - animatedItem.atPoint.x) * progress,\n                            animatedItem.atPoint.y + (animatedItem.toPoint.y - animatedItem.atPoint.y) * progress)\n                        animatedItem.element.transform.baseVal.appendItem(transform)\n                        break\n                    case CHANGE_TYPE.appear:\n                        animatedItem.element.style.opacity = Math.round(progress * 100) / 100\n                        break\n                    case CHANGE_TYPE.disappear:\n                        animatedItem.element.style.opacity = Math.round((1 - progress) * 100) / 100\n                        break\n                }\n            } else {\n                console.warn(\"animatedItem has no element\", animatedItem)\n            }\n        })\n        this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n            type: ANIMATION_EVENT_TYPE.frame,\n            progress: progress\n        })\n    }\n\n    static squareDistance(index1, index2) {\n        const file1 = index1 % 8\n        const rank1 = Math.floor(index1 / 8)\n        const file2 = index2 % 8\n        const rank2 = Math.floor(index2 / 8)\n        return Math.max(Math.abs(rank2 - rank1), Math.abs(file2 - file1))\n    }\n\n}\n\nexport class PositionAnimationsQueue extends PromiseQueue {\n\n    constructor(chessboard) {\n        super()\n        this.chessboard = chessboard\n    }\n\n    async enqueuePositionChange(positionFrom, positionTo, animated) {\n        if(positionFrom.getFen() === positionTo.getFen()) {\n            return Promise.resolve()\n        } else {\n            return super.enqueue(() => new Promise((resolve) => {\n                let duration = animated ? this.chessboard.props.style.animationDuration : 0\n                if (this.queue.length > 0) {\n                    duration = duration / (1 + Math.pow(this.queue.length / 5, 2))\n                }\n                new PositionsAnimation(this.chessboard.view,\n                    positionFrom, positionTo, animated ? duration : 0,\n                    () => {\n                        if (this.chessboard.view) { // if destroyed, no view anymore\n                            this.chessboard.view.redrawPieces(positionTo.squares)\n                        }\n                        resolve()\n                    }\n                )\n            }))\n        }\n    }\n\n    async enqueueTurnBoard(position, color, animated) {\n        return super.enqueue(() => new Promise((resolve) => {\n            const emptyPosition = new Position(FEN.empty)\n            let duration = animated ? this.chessboard.props.style.animationDuration : 0\n            if(this.queue.length > 0) {\n                duration = duration / (1 + Math.pow(this.queue.length / 5, 2))\n            }\n            new PositionsAnimation(this.chessboard.view,\n                position, emptyPosition, animated ? duration : 0,\n                () => {\n                    this.chessboard.state.orientation = color\n                    this.chessboard.view.redrawBoard()\n                    this.chessboard.view.redrawPieces(emptyPosition.squares)\n                    new PositionsAnimation(this.chessboard.view,\n                        emptyPosition, position, animated ? duration : 0,\n                        () => {\n                            this.chessboard.view.redrawPieces(position.squares)\n                            resolve()\n                        }\n                    )\n                }\n            )\n        }))\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {Svg} from \"../lib/Svg.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\nconst MOVE_INPUT_STATE = {\n    waitForInputStart: \"waitForInputStart\",\n    pieceClickedThreshold: \"pieceClickedThreshold\",\n    clickTo: \"clickTo\",\n    secondClickThreshold: \"secondClickThreshold\",\n    dragTo: \"dragTo\",\n    clickDragTo: \"clickDragTo\",\n    moveDone: \"moveDone\",\n    reset: \"reset\"\n}\n\nexport const MOVE_CANCELED_REASON = {\n    secondClick: \"secondClick\", // clicked the same piece\n    secondaryClick: \"secondaryClick\", // right click while moving\n    movedOutOfBoard: \"movedOutOfBoard\",\n    draggedBack: \"draggedBack\", // dragged to the start square\n    clickedAnotherPiece: \"clickedAnotherPiece\" // of the same color\n}\n\nconst DRAG_THRESHOLD = 4\n\nexport class VisualMoveInput {\n\n    constructor(view) {\n        this.view = view\n        this.chessboard = view.chessboard\n        this.moveInputState = null\n        this.fromSquare = null\n        this.toSquare = null\n\n        this.setMoveInputState(MOVE_INPUT_STATE.waitForInputStart)\n    }\n\n    moveInputStartedCallback(square) {\n        const result = this.view.moveInputStartedCallback(square)\n        if (result) {\n            this.chessboard.state.moveInputProcess = Utils.createTask()\n            this.chessboard.state.moveInputProcess.then((result) => {\n                if (this.moveInputState === MOVE_INPUT_STATE.waitForInputStart ||\n                    this.moveInputState === MOVE_INPUT_STATE.moveDone) {\n                    this.view.moveInputFinishedCallback(this.fromSquare, this.toSquare, result)\n                }\n            })\n        }\n        return result\n    }\n\n    movingOverSquareCallback(fromSquare, toSquare) {\n        this.view.movingOverSquareCallback(fromSquare, toSquare)\n    }\n\n    validateMoveInputCallback(fromSquare, toSquare) {\n        const result = this.view.validateMoveInputCallback(fromSquare, toSquare)\n        this.chessboard.state.moveInputProcess.resolve(result)\n        return result\n    }\n\n    moveInputCanceledCallback(fromSquare, toSquare, reason) {\n        this.view.moveInputCanceledCallback(fromSquare, toSquare, reason)\n        this.chessboard.state.moveInputProcess.resolve()\n    }\n\n    setMoveInputState(newState, params = undefined) {\n        const prevState = this.moveInputState\n        this.moveInputState = newState\n\n        switch (newState) {\n\n            case MOVE_INPUT_STATE.waitForInputStart:\n                break\n\n            case MOVE_INPUT_STATE.pieceClickedThreshold:\n                if (MOVE_INPUT_STATE.waitForInputStart !== prevState && MOVE_INPUT_STATE.clickTo !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.pointerMoveListener) {\n                    removeEventListener(this.pointerMoveListener.type, this.pointerMoveListener)\n                    this.pointerMoveListener = null\n                }\n                if (this.pointerUpListener) {\n                    removeEventListener(this.pointerUpListener.type, this.pointerUpListener)\n                    this.pointerUpListener = null\n                }\n                this.fromSquare = params.square\n                this.toSquare = null\n                this.movedPiece = params.piece\n                this.startPoint = params.point\n                if (!this.pointerMoveListener && !this.pointerUpListener) {\n                    if (params.type === \"mousedown\") {\n                        this.pointerMoveListener = this.onPointerMove.bind(this)\n                        this.pointerMoveListener.type = \"mousemove\"\n                        addEventListener(\"mousemove\", this.pointerMoveListener)\n                        this.pointerUpListener = this.onPointerUp.bind(this)\n                        this.pointerUpListener.type = \"mouseup\"\n                        addEventListener(\"mouseup\", this.pointerUpListener)\n                    } else if (params.type === \"touchstart\") {\n                        this.pointerMoveListener = this.onPointerMove.bind(this)\n                        this.pointerMoveListener.type = \"touchmove\"\n                        addEventListener(\"touchmove\", this.pointerMoveListener)\n                        this.pointerUpListener = this.onPointerUp.bind(this)\n                        this.pointerUpListener.type = \"touchend\"\n                        addEventListener(\"touchend\", this.pointerUpListener)\n                    } else {\n                        throw Error(\"4b74af\")\n                    }\n                    if (!this.contextMenuListener) {\n                        this.contextMenuListener = this.onContextMenu.bind(this)\n                        this.chessboard.view.svg.addEventListener(\"contextmenu\", this.contextMenuListener)\n                    }\n                } else {\n                    throw Error(\"94ad0c\")\n                }\n                break\n\n            case MOVE_INPUT_STATE.clickTo:\n                if (this.draggablePiece) {\n                    Svg.removeElement(this.draggablePiece)\n                    this.draggablePiece = null\n                }\n                if (prevState === MOVE_INPUT_STATE.dragTo) {\n                    this.view.setPieceVisibility(params.square, true)\n                }\n                break\n\n            case MOVE_INPUT_STATE.secondClickThreshold:\n                if (MOVE_INPUT_STATE.clickTo !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                this.startPoint = params.point\n                break\n\n            case MOVE_INPUT_STATE.dragTo:\n                if (MOVE_INPUT_STATE.pieceClickedThreshold !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.view.setPieceVisibility(params.square, false)\n                    this.createDraggablePiece(params.piece)\n                }\n                break\n\n            case MOVE_INPUT_STATE.clickDragTo:\n                if (MOVE_INPUT_STATE.secondClickThreshold !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.view.setPieceVisibility(params.square, false)\n                    this.createDraggablePiece(params.piece)\n                }\n                break\n\n            case MOVE_INPUT_STATE.moveDone:\n                if ([MOVE_INPUT_STATE.dragTo, MOVE_INPUT_STATE.clickTo, MOVE_INPUT_STATE.clickDragTo].indexOf(prevState) === -1) {\n                    throw new Error(\"moveInputState\")\n                }\n                this.toSquare = params.square\n                if (this.toSquare && this.validateMoveInputCallback(this.fromSquare, this.toSquare)) {\n                    this.chessboard.movePiece(this.fromSquare, this.toSquare, prevState === MOVE_INPUT_STATE.clickTo).then(() => {\n                        if (prevState === MOVE_INPUT_STATE.clickTo) {\n                            this.view.setPieceVisibility(this.toSquare, true)\n                        }\n                        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                    })\n                } else {\n                    this.view.setPieceVisibility(this.fromSquare, true)\n                    this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                }\n                break\n\n            case MOVE_INPUT_STATE.reset:\n                if (this.fromSquare && !this.toSquare && this.movedPiece) {\n                    this.chessboard.state.position.setPiece(this.fromSquare, this.movedPiece)\n                }\n                this.fromSquare = null\n                this.toSquare = null\n                this.movedPiece = null\n                if (this.draggablePiece) {\n                    Svg.removeElement(this.draggablePiece)\n                    this.draggablePiece = null\n                }\n                if (this.pointerMoveListener) {\n                    removeEventListener(this.pointerMoveListener.type, this.pointerMoveListener)\n                    this.pointerMoveListener = null\n                }\n                if (this.pointerUpListener) {\n                    removeEventListener(this.pointerUpListener.type, this.pointerUpListener)\n                    this.pointerUpListener = null\n                }\n                if (this.contextMenuListener) {\n                    removeEventListener(\"contextmenu\", this.contextMenuListener)\n                    this.contextMenuListener = null\n                }\n                this.setMoveInputState(MOVE_INPUT_STATE.waitForInputStart)\n                // set temporarily hidden pieces visible again\n                const hiddenPieces = this.view.piecesGroup.querySelectorAll(\"[visibility=hidden]\")\n                for (let i = 0; i < hiddenPieces.length; i++) {\n                    hiddenPieces[i].removeAttribute(\"visibility\")\n                }\n                break\n\n            default:\n                throw Error(`260b09: moveInputState ${newState}`)\n        }\n    }\n\n    createDraggablePiece(pieceName) {\n        // maybe I should use the existing piece from the board and don't create a new one\n        if (this.draggablePiece) {\n            throw Error(\"draggablePiece already exists\")\n        }\n        this.draggablePiece = Svg.createSvg(document.body)\n        this.draggablePiece.classList.add(\"cm-chessboard-draggable-piece\")\n        this.draggablePiece.setAttribute(\"width\", this.view.squareWidth)\n        this.draggablePiece.setAttribute(\"height\", this.view.squareHeight)\n        this.draggablePiece.setAttribute(\"style\", \"pointer-events: none\")\n        this.draggablePiece.name = pieceName\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.view.getSpriteUrl()\n        const piece = Svg.addElement(this.draggablePiece, \"use\", {\n            href: `${spriteUrl}#${pieceName}`\n        })\n        const scaling = this.view.squareHeight / this.chessboard.props.style.pieces.tileSize\n        const transformScale = (this.draggablePiece.createSVGTransform())\n        transformScale.setScale(scaling, scaling)\n        piece.transform.baseVal.appendItem(transformScale)\n    }\n\n    moveDraggablePiece(x, y) {\n        this.draggablePiece.setAttribute(\"style\",\n            `pointer-events: none; position: absolute; left: ${x - (this.view.squareHeight / 2)}px; top: ${y - (this.view.squareHeight / 2)}px`)\n    }\n\n    onPointerDown(e) {\n        if (!(e.type === \"mousedown\" && e.button === 0 || e.type === \"touchstart\")) {\n            return\n        }\n        const square = e.target.getAttribute(\"data-square\")\n        if (!square) { // pointer on square\n            return\n        }\n        const pieceName = this.chessboard.getPiece(square)\n        let color\n        if (pieceName) {\n            color = pieceName ? pieceName.substring(0, 1) : null\n            // allow scrolling, if not pointed on draggable piece\n            if (color === \"w\" && this.chessboard.state.inputWhiteEnabled ||\n                color === \"b\" && this.chessboard.state.inputBlackEnabled) {\n                e.preventDefault()\n            }\n        }\n        if (this.moveInputState !== MOVE_INPUT_STATE.waitForInputStart ||\n            this.chessboard.state.inputWhiteEnabled && color === \"w\" ||\n            this.chessboard.state.inputBlackEnabled && color === \"b\") {\n            let point\n            if (e.type === \"mousedown\") {\n                point = {x: e.clientX, y: e.clientY}\n            } else if (e.type === \"touchstart\") {\n                point = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            }\n            if (this.moveInputState === MOVE_INPUT_STATE.waitForInputStart && pieceName && this.moveInputStartedCallback(square)) {\n                this.setMoveInputState(MOVE_INPUT_STATE.pieceClickedThreshold, {\n                    square: square,\n                    piece: pieceName,\n                    point: point,\n                    type: e.type\n                })\n            } else if (this.moveInputState === MOVE_INPUT_STATE.clickTo) {\n                if (square === this.fromSquare) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.secondClickThreshold, {\n                        square: square,\n                        piece: pieceName,\n                        point: point,\n                        type: e.type\n                    })\n                } else {\n                    const pieceName = this.chessboard.getPiece(square)\n                    const pieceColor = pieceName ? pieceName.substring(0, 1) : null\n                    const startPieceName = this.chessboard.getPiece(this.fromSquare)\n                    const startPieceColor = startPieceName ? startPieceName.substring(0, 1) : null\n                    if (color && startPieceColor === pieceColor) {\n                        this.moveInputCanceledCallback(this.fromSquare, square, MOVE_CANCELED_REASON.clickedAnotherPiece)\n                        if (this.moveInputStartedCallback(square)) {\n                            this.setMoveInputState(MOVE_INPUT_STATE.pieceClickedThreshold, {\n                                square: square,\n                                piece: pieceName,\n                                point: point,\n                                type: e.type\n                            })\n                        } else {\n                            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                        }\n                    } else {\n                        this.setMoveInputState(MOVE_INPUT_STATE.moveDone, {square: square})\n                    }\n                }\n            }\n        }\n    }\n\n    onPointerMove(e) {\n        let pageX, pageY, clientX, clientY, target\n        if (e.type === \"mousemove\") {\n            clientX = e.clientX\n            clientY = e.clientY\n            pageX = e.pageX\n            pageY = e.pageY\n            target = e.target\n        } else if (e.type === \"touchmove\") {\n            clientX = e.touches[0].clientX\n            clientY = e.touches[0].clientY\n            pageX = e.touches[0].pageX\n            pageY = e.touches[0].pageY\n            target = document.elementFromPoint(clientX, clientY)\n        }\n        if (this.moveInputState === MOVE_INPUT_STATE.pieceClickedThreshold || this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n            if (Math.abs(this.startPoint.x - clientX) > DRAG_THRESHOLD || Math.abs(this.startPoint.y - clientY) > DRAG_THRESHOLD) {\n                if (this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.clickDragTo, {\n                        square: this.fromSquare,\n                        piece: this.movedPiece\n                    })\n                } else {\n                    this.setMoveInputState(MOVE_INPUT_STATE.dragTo, {square: this.fromSquare, piece: this.movedPiece})\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.moveDraggablePiece(pageX, pageY)\n                }\n            }\n        } else if (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo || this.moveInputState === MOVE_INPUT_STATE.clickTo) {\n            if (target && target.getAttribute && target.parentElement === this.view.boardGroup) {\n                const square = target.getAttribute(\"data-square\")\n                if (square !== this.fromSquare && square !== this.toSquare) {\n                    this.toSquare = square\n                    this.movingOverSquareCallback(this.fromSquare, this.toSquare)\n                } else if (square === this.fromSquare && this.toSquare !== null) {\n                    this.toSquare = null\n                    this.movingOverSquareCallback(this.fromSquare, null)\n                }\n            } else if (this.toSquare !== null) {\n                this.toSquare = null\n                this.movingOverSquareCallback(this.fromSquare, null)\n            }\n\n            if (this.view.chessboard.state.inputEnabled() && (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo)) {\n                this.moveDraggablePiece(pageX, pageY)\n            }\n        }\n    }\n\n    onPointerUp(e) {\n        let target\n        if (e.type === \"mouseup\") {\n            target = e.target\n        } else if (e.type === \"touchend\") {\n            target = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY)\n        }\n        if (target && target.getAttribute) {\n            const square = target.getAttribute(\"data-square\")\n\n            if (square) {\n                if (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo) {\n                    if (this.fromSquare === square) {\n                        if (this.moveInputState === MOVE_INPUT_STATE.clickDragTo) {\n                            this.chessboard.state.position.setPiece(this.fromSquare, this.movedPiece)\n                            this.view.setPieceVisibility(this.fromSquare)\n                            this.moveInputCanceledCallback(square, null, MOVE_CANCELED_REASON.draggedBack)\n                            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                        } else {\n                            this.setMoveInputState(MOVE_INPUT_STATE.clickTo, {square: square})\n                        }\n                    } else {\n                        this.setMoveInputState(MOVE_INPUT_STATE.moveDone, {square: square})\n                    }\n                } else if (this.moveInputState === MOVE_INPUT_STATE.pieceClickedThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.clickTo, {square: square})\n                } else if (this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                    this.moveInputCanceledCallback(square, null, MOVE_CANCELED_REASON.secondClick)\n                }\n            } else {\n                this.view.redrawPieces()\n                const moveStartSquare = this.fromSquare\n                this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                this.moveInputCanceledCallback(moveStartSquare, null, MOVE_CANCELED_REASON.movedOutOfBoard)\n            }\n        } else {\n            this.view.redrawPieces()\n            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n        }\n    }\n\n    onContextMenu(e) { // while moving\n        e.preventDefault()\n        this.view.redrawPieces()\n        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n        this.moveInputCanceledCallback(this.fromSquare, null, MOVE_CANCELED_REASON.secondaryClick)\n    }\n\n    isDragging() {\n        return this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo\n    }\n\n    destroy() {\n        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {VisualMoveInput} from \"./VisualMoveInput.js\"\nimport {Position} from \"../model/Position.js\"\nimport {EXTENSION_POINT} from \"../model/Extension.js\"\nimport {Svg} from \"../lib/Svg.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\nexport const COLOR = {\n    white: \"w\",\n    black: \"b\"\n}\nexport const INPUT_EVENT_TYPE = {\n    moveInputStarted: \"moveInputStarted\",\n    movingOverSquare: \"movingOverSquare\", // while dragging or hover after click\n    validateMoveInput: \"validateMoveInput\",\n    moveInputCanceled: \"moveInputCanceled\",\n    moveInputFinished: \"moveInputFinished\"\n}\nexport const POINTER_EVENTS = {\n    pointercancel: \"pointercancel\",\n    pointerdown: \"pointerdown\",\n    pointerenter: \"pointerenter\",\n    pointerleave: \"pointerleave\",\n    pointermove: \"pointermove\",\n    pointerout: \"pointerout\",\n    pointerover: \"pointerover\",\n    pointerup: \"pointerup\"\n}\nexport const BORDER_TYPE = {\n    none: \"none\", // no border\n    thin: \"thin\", // thin border\n    frame: \"frame\" // wide border with coordinates in it\n}\n\nexport class ChessboardView {\n    constructor(chessboard) {\n        this.chessboard = chessboard\n        this.visualMoveInput = new VisualMoveInput(this)\n        if (chessboard.props.assetsCache) {\n            this.cacheSpriteToDiv(\"cm-chessboard-sprite\", this.getSpriteUrl())\n        }\n        this.container = document.createElement(\"div\")\n        this.chessboard.context.appendChild(this.container)\n        if (chessboard.props.responsive) {\n            if (typeof ResizeObserver !== \"undefined\") {\n                this.resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => { // prevents \"ResizeObserver loop completed with undelivered notifications.\"\n                        this.handleResize()\n                    })\n                })\n                this.resizeObserver.observe(this.chessboard.context)\n            } else {\n                this.resizeListener = this.handleResize.bind(this)\n                window.addEventListener(\"resize\", this.resizeListener)\n            }\n        }\n        this.positionsAnimationTask = Promise.resolve()\n        this.pointerDownListener = this.pointerDownHandler.bind(this)\n        this.container.addEventListener(\"mousedown\", this.pointerDownListener)\n        this.container.addEventListener(\"touchstart\", this.pointerDownListener, {passive: false})\n        this.createSvgAndGroups()\n        this.handleResize()\n    }\n\n    pointerDownHandler(e) {\n        this.visualMoveInput.onPointerDown(e)\n    }\n\n    destroy() {\n        this.visualMoveInput.destroy()\n        if (this.resizeObserver) {\n            this.resizeObserver.unobserve(this.chessboard.context)\n        }\n        if (this.resizeListener) {\n            window.removeEventListener(\"resize\", this.resizeListener)\n        }\n        this.chessboard.context.removeEventListener(\"mousedown\", this.pointerDownListener)\n        this.chessboard.context.removeEventListener(\"touchstart\", this.pointerDownListener)\n        Svg.removeElement(this.svg)\n        this.container.remove()\n    }\n\n    // Sprite //\n\n    cacheSpriteToDiv(wrapperId, url) {\n        if (!document.getElementById(wrapperId)) {\n            const wrapper = document.createElement(\"div\")\n            wrapper.style.transform = \"scale(0)\"\n            wrapper.style.position = \"absolute\"\n            wrapper.setAttribute(\"aria-hidden\", \"true\")\n            wrapper.id = wrapperId\n            document.body.appendChild(wrapper)\n            const xhr = new XMLHttpRequest()\n            xhr.open(\"GET\", url, true)\n            xhr.onload = function () {\n                wrapper.insertAdjacentHTML('afterbegin', xhr.response)\n            }\n            xhr.send()\n        }\n    }\n\n    createSvgAndGroups() {\n        this.svg = Svg.createSvg(this.container)\n        // let description = document.createElement(\"description\")\n        // description.innerText = \"Chessboard\"\n        // description.id = \"svg-description\"\n        // this.svg.appendChild(description)\n        let cssClass = this.chessboard.props.style.cssClass ? this.chessboard.props.style.cssClass : \"default\"\n        this.svg.setAttribute(\"class\", \"cm-chessboard border-type-\" + this.chessboard.props.style.borderType + \" \" + cssClass)\n        // this.svg.setAttribute(\"aria-describedby\", \"svg-description\")\n        this.svg.setAttribute(\"role\", \"img\")\n        this.updateMetrics()\n        this.boardGroup = Svg.addElement(this.svg, \"g\", {class: \"board\"})\n        this.coordinatesGroup = Svg.addElement(this.svg, \"g\", {class: \"coordinates\", \"aria-hidden\": \"true\"})\n        this.markersLayer = Svg.addElement(this.svg, \"g\", {class: \"markers-layer\"})\n        this.piecesLayer = Svg.addElement(this.svg, \"g\", {class: \"pieces-layer\"})\n        this.piecesGroup = Svg.addElement(this.piecesLayer, \"g\", {class: \"pieces\"})\n        this.markersTopLayer = Svg.addElement(this.svg, \"g\", {class: \"markers-top-layer\"})\n        this.interactiveTopLayer = Svg.addElement(this.svg, \"g\", {class: \"interactive-top-layer\"})\n    }\n\n    updateMetrics() {\n        const piecesTileSize = this.chessboard.props.style.pieces.tileSize\n        this.width = this.container.clientWidth\n        this.height = this.container.clientWidth * (this.chessboard.props.style.aspectRatio || 1)\n        if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n            this.borderSize = this.width / 25\n        } else if (this.chessboard.props.style.borderType === BORDER_TYPE.thin) {\n            this.borderSize = this.width / 320\n        } else {\n            this.borderSize = 0\n        }\n        this.innerWidth = this.width - 2 * this.borderSize\n        this.innerHeight = this.height - 2 * this.borderSize\n        this.squareWidth = this.innerWidth / 8\n        this.squareHeight = this.innerHeight / 8\n        this.scalingX = this.squareWidth / piecesTileSize\n        this.scalingY = this.squareHeight / piecesTileSize\n        this.pieceXTranslate = (this.squareWidth / 2 - piecesTileSize * this.scalingY / 2)\n    }\n\n    handleResize() {\n        this.container.style.width = (this.chessboard.context.clientWidth) + \"px\"\n        this.container.style.height = (this.chessboard.context.clientWidth * this.chessboard.props.style.aspectRatio) + \"px\"\n        if (this.container.clientWidth !== this.width || this.container.clientHeight !== this.height) {\n            this.updateMetrics()\n            this.redrawBoard()\n            this.redrawPieces()\n        }\n        this.svg.setAttribute(\"width\", \"100%\")\n        this.svg.setAttribute(\"height\", \"100%\")\n    }\n\n    redrawBoard() {\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.beforeRedrawBoard)\n        this.redrawSquares()\n        this.drawCoordinates()\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.afterRedrawBoard)\n        this.visualizeInputState()\n    }\n\n    // Board //\n\n    redrawSquares() {\n        while (this.boardGroup.firstChild) {\n            this.boardGroup.removeChild(this.boardGroup.lastChild)\n        }\n\n        let boardBorder = Svg.addElement(this.boardGroup, \"rect\", {width: this.width, height: this.height})\n        boardBorder.setAttribute(\"class\", \"border\")\n        if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n            const innerPos = this.borderSize\n            let borderInner = Svg.addElement(this.boardGroup, \"rect\", {\n                x: innerPos, y: innerPos, width: this.width - innerPos * 2, height: this.height - innerPos * 2\n            })\n            borderInner.setAttribute(\"class\", \"border-inner\")\n        }\n\n        for (let i = 0; i < 64; i++) {\n            const index = this.chessboard.state.orientation === COLOR.white ? i : 63 - i\n            const squareColor = ((9 * index) & 8) === 0 ? 'black' : 'white'\n            const fieldClass = `square ${squareColor}`\n            const point = this.squareToPoint(Position.indexToSquare(index))\n            const squareRect = Svg.addElement(this.boardGroup, \"rect\", {\n                x: point.x, y: point.y, width: this.squareWidth, height: this.squareHeight\n            })\n            squareRect.setAttribute(\"class\", fieldClass)\n            squareRect.setAttribute(\"data-square\", Position.indexToSquare(index))\n        }\n    }\n\n    drawCoordinates() {\n        if (!this.chessboard.props.style.showCoordinates) {\n            return\n        }\n        while (this.coordinatesGroup.firstChild) {\n            this.coordinatesGroup.removeChild(this.coordinatesGroup.lastChild)\n        }\n        const inline = this.chessboard.props.style.borderType !== BORDER_TYPE.frame\n        for (let file = 0; file < 8; file++) {\n            let x = this.borderSize + (17 + this.chessboard.props.style.pieces.tileSize * file) * this.scalingX\n            let y = this.height - this.scalingY * 3.5\n            let cssClass = \"coordinate file\"\n            if (inline) {\n                x = x + this.scalingX * 15.5\n                cssClass += file % 2 ? \" white\" : \" black\"\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass, x: x, y: y, style: `font-size: ${this.scalingY * 10}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = String.fromCharCode(97 + file)\n            } else {\n                textElement.textContent = String.fromCharCode(104 - file)\n            }\n        }\n        for (let rank = 0; rank < 8; rank++) {\n            let x = (this.borderSize / 3.7)\n            let y = this.borderSize + 25 * this.scalingY + rank * this.squareHeight\n            let cssClass = \"coordinate rank\"\n            if (inline) {\n                cssClass += rank % 2 ? \" black\" : \" white\"\n                if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n                    x = x + this.scalingX * 10\n                    y = y - this.scalingY * 15\n                } else {\n                    x = x + this.scalingX * 2\n                    y = y - this.scalingY * 15\n                }\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass, x: x, y: y, style: `font-size: ${this.scalingY * 10}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = \"\" + (8 - rank)\n            } else {\n                textElement.textContent = \"\" + (1 + rank)\n            }\n        }\n    }\n\n    // Pieces //\n\n    redrawPieces(squares = this.chessboard.state.position.squares) {\n        const childNodes = Array.from(this.piecesGroup.childNodes)\n        const isDragging = this.visualMoveInput.isDragging()\n        for (let i = 0; i < 64; i++) {\n            const pieceName = squares[i]\n            if (pieceName) {\n                const square = Position.indexToSquare(i)\n                this.drawPieceOnSquare(square, pieceName, isDragging && square === this.visualMoveInput.fromSquare)\n            }\n        }\n        for (const childNode of childNodes) {\n            this.piecesGroup.removeChild(childNode)\n        }\n    }\n\n    drawPiece(parentGroup, pieceName, point) {\n        const pieceGroup = Svg.addElement(parentGroup, \"g\", {})\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\n            href: `${spriteUrl}#${pieceName}`, class: \"piece\"\n        })\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    drawPieceOnSquare(square, pieceName, hidden = false) {\n        const pieceGroup = Svg.addElement(this.piecesGroup, \"g\", {})\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        pieceGroup.setAttribute(\"data-square\", square)\n        if (hidden) {\n            pieceGroup.setAttribute(\"visibility\", \"hidden\")\n        }\n        const point = this.squareToPoint(square)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\n            href: `${spriteUrl}#${pieceName}`, class: \"piece\"\n        })\n        // center on square\n        const transformTranslate = (this.svg.createSVGTransform())\n        transformTranslate.setTranslate(this.pieceXTranslate, 0)\n        pieceUse.transform.baseVal.appendItem(transformTranslate)\n        // scale\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    setPieceVisibility(square, visible = true) {\n        const piece = this.getPieceElement(square)\n        if (piece) {\n            if (visible) {\n                piece.setAttribute(\"visibility\", \"visible\")\n            } else {\n                piece.setAttribute(\"visibility\", \"hidden\")\n            }\n        } else {\n            console.warn(\"no piece on\", square)\n        }\n    }\n\n    getPieceElement(square) {\n        if (!square || square.length < 2) {\n            console.warn(\"invalid square\", square)\n            return null\n        }\n        const piece = this.piecesGroup.querySelector(`g[data-square='${square}']`)\n        if (!piece) {\n            console.warn(\"no piece on\", square)\n            return null\n        }\n        return piece\n    }\n\n    // enable and disable move input //\n\n    enableMoveInput(eventHandler, color = null) {\n        if (this.chessboard.state.moveInputCallback) {\n            throw Error(\"moveInput already enabled\")\n        }\n        if (color === COLOR.white) {\n            this.chessboard.state.inputWhiteEnabled = true\n        } else if (color === COLOR.black) {\n            this.chessboard.state.inputBlackEnabled = true\n        } else {\n            this.chessboard.state.inputWhiteEnabled = true\n            this.chessboard.state.inputBlackEnabled = true\n        }\n        this.chessboard.state.moveInputCallback = eventHandler\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInputToggled, {enabled: true, color: color})\n        this.visualizeInputState()\n    }\n\n    disableMoveInput() {\n        this.chessboard.state.inputWhiteEnabled = false\n        this.chessboard.state.inputBlackEnabled = false\n        this.chessboard.state.moveInputCallback = null\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInputToggled, {enabled: false})\n        this.visualizeInputState()\n    }\n\n    // callbacks //\n\n    moveInputStartedCallback(square) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputStarted,\n            square: square, /** square is deprecated, use squareFrom (2023-05-22) */\n            squareFrom: square,\n            piece: this.chessboard.getPiece(square)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n        return data.moveInputCallbackResult\n    }\n\n    movingOverSquareCallback(squareFrom, squareTo) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.movingOverSquare,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            piece: this.chessboard.getPiece(squareFrom)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    validateMoveInputCallback(squareFrom, squareTo) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.validateMoveInput,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            piece: this.chessboard.getPiece(squareFrom)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n        return data.moveInputCallbackResult\n    }\n\n    moveInputCanceledCallback(squareFrom, squareTo, reason) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputCanceled,\n            reason: reason,\n            squareFrom: squareFrom,\n            squareTo: squareTo\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    moveInputFinishedCallback(squareFrom, squareTo, legalMove) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputFinished,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            legalMove: legalMove\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    // Helpers //\n\n    visualizeInputState() {\n        if (this.chessboard.state) { // fix https://github.com/shaack/cm-chessboard/issues/47\n            if (this.chessboard.state.inputWhiteEnabled || this.chessboard.state.inputBlackEnabled) {\n                this.boardGroup.setAttribute(\"class\", \"board input-enabled\")\n            } else {\n                this.boardGroup.setAttribute(\"class\", \"board\")\n            }\n        }\n    }\n\n    indexToPoint(index) {\n        let x, y\n        if (this.chessboard.state.orientation === COLOR.white) {\n            x = this.borderSize + (index % 8) * this.squareWidth\n            y = this.borderSize + (7 - Math.floor(index / 8)) * this.squareHeight\n        } else {\n            x = this.borderSize + (7 - index % 8) * this.squareWidth\n            y = this.borderSize + (Math.floor(index / 8)) * this.squareHeight\n        }\n        return {x: x, y: y}\n    }\n\n    squareToPoint(square) {\n        const index = Position.squareToIndex(square)\n        return this.indexToPoint(index)\n    }\n\n    getSpriteUrl() {\n        if (Utils.isAbsoluteUrl(this.chessboard.props.style.pieces.file)) {\n            return this.chessboard.props.style.pieces.file\n        } else {\n            return this.chessboard.props.assetsUrl + this.chessboard.props.style.pieces.file\n        }\n    }\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {ChessboardState} from \"./model/ChessboardState.js\"\nimport {FEN, Position} from \"./model/Position.js\"\nimport {PositionAnimationsQueue} from \"./view/PositionAnimationsQueue.js\"\nimport {EXTENSION_POINT} from \"./model/Extension.js\"\nimport {ChessboardView, COLOR, INPUT_EVENT_TYPE, BORDER_TYPE, POINTER_EVENTS} from \"./view/ChessboardView.js\"\nimport {Utils} from \"./lib/Utils.js\"\n\nexport const PIECE = {\n    wp: \"wp\", wb: \"wb\", wn: \"wn\", wr: \"wr\", wq: \"wq\", wk: \"wk\",\n    bp: \"bp\", bb: \"bb\", bn: \"bn\", br: \"br\", bq: \"bq\", bk: \"bk\"\n}\nexport const PIECE_TYPE = {\n    pawn: \"p\", knight: \"n\", bishop: \"b\", rook: \"r\", queen: \"q\", king: \"k\"\n}\nexport const PIECES_FILE_TYPE = {\n    svgSprite: \"svgSprite\"\n}\nexport {COLOR}\nexport {INPUT_EVENT_TYPE}\nexport {POINTER_EVENTS}\nexport {BORDER_TYPE}\nexport {FEN}\n\nexport class Chessboard {\n\n    constructor(context, props = {}) {\n        if (!context) {\n            throw new Error(\"container element is \" + context)\n        }\n        this.context = context\n        this.id = (Math.random() + 1).toString(36).substring(2, 8)\n        this.extensions = []\n        this.props = {\n            position: FEN.empty, // set position as fen, use FEN.start or FEN.empty as shortcuts\n            orientation: COLOR.white, // white on bottom\n            responsive: true, // resize the board automatically to the size of the context element\n            assetsUrl: \"./assets/\", // put all css and sprites in this folder, will be ignored for absolute urls of assets files\n            assetsCache: true, // cache the sprites, deactivate if you want to use multiple pieces sets in one page\n            style: {\n                cssClass: \"default\", // set the css theme of the board, try \"green\", \"blue\" or \"chess-club\"\n                showCoordinates: true, // show ranks and files\n                borderType: BORDER_TYPE.none, // \"thin\" thin border, \"frame\" wide border with coordinates in it, \"none\" no border\n                aspectRatio: 1, // height/width of the board\n                pieces: {\n                    type: PIECES_FILE_TYPE.svgSprite, // pieces are in an SVG sprite, no other type supported for now\n                    file: \"pieces/standard.svg\", // the filename of the sprite in `assets/pieces/` or an absolute url like `https://…` or `/…`\n                    tileSize: 40 // the tile size in the sprite\n                },\n                animationDuration: 300 // pieces animation duration in milliseconds. Disable all animations with `0`\n            },\n            extensions: [ /* {class: ExtensionClass, props: { ... }} */] // add extensions here\n        }\n        Utils.mergeObjects(this.props, props)\n        this.state = new ChessboardState()\n        this.view = new ChessboardView(this)\n        this.positionAnimationsQueue = new PositionAnimationsQueue(this)\n        this.state.orientation = this.props.orientation\n        // instantiate extensions\n        for (const extensionData of this.props.extensions) {\n            this.addExtension(extensionData.class, extensionData.props)\n        }\n        this.view.redrawBoard()\n        this.state.position = new Position(this.props.position)\n        this.view.redrawPieces()\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        this.initialized = Promise.resolve() // deprecated 2023-09-19 don't use this anymore\n    }\n\n    // API //\n\n    async setPiece(square, piece, animated = false) {\n        const positionFrom = this.state.position.clone()\n        this.state.position.setPiece(square, piece)\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async movePiece(squareFrom, squareTo, animated = false) {\n        const positionFrom = this.state.position.clone()\n        this.state.position.movePiece(squareFrom, squareTo)\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async setPosition(fen, animated = false) {\n        const positionFrom = this.state.position.clone()\n        const positionTo = new Position(fen)\n        if (positionFrom.getFen() !== positionTo.getFen()) {\n            this.state.position.setFen(fen)\n            this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        }\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async setOrientation(color, animated = false) {\n        const position = this.state.position.clone()\n        if (this.boardTurning) {\n            console.warn(\"setOrientation is only once in queue allowed\")\n            return\n        }\n        this.boardTurning = true\n        return this.positionAnimationsQueue.enqueueTurnBoard(position, color, animated).then(() => {\n            this.boardTurning = false\n            this.state.invokeExtensionPoints(EXTENSION_POINT.boardChanged)\n        })\n    }\n\n    getPiece(square) {\n        return this.state.position.getPiece(square)\n    }\n\n    getPosition() {\n        return this.state.position.getFen()\n    }\n\n    getOrientation() {\n        return this.state.orientation\n    }\n\n    enableMoveInput(eventHandler, color = undefined) {\n        this.view.enableMoveInput(eventHandler, color)\n    }\n\n    disableMoveInput() {\n        this.view.disableMoveInput()\n    }\n\n    isMoveInputEnabled() {\n        return this.state.inputWhiteEnabled || this.state.inputBlackEnabled\n    }\n\n    enableSquareSelect(eventType = POINTER_EVENTS.pointerdown, eventHandler) {\n        if (!this.squareSelectListener) {\n            this.squareSelectListener = function (e) {\n                const square = e.target.getAttribute(\"data-square\")\n                eventHandler({\n                    eventType: e.type,\n                    event: e,\n                    chessboard: this,\n                    square: square\n                })\n            }\n        }\n        this.context.addEventListener(eventType, this.squareSelectListener)\n        this.state.squareSelectEnabled = true\n        this.view.visualizeInputState()\n    }\n\n    disableSquareSelect(eventType) {\n        this.context.removeEventListener(eventType, this.squareSelectListener)\n        this.squareSelectListener = undefined\n        this.state.squareSelectEnabled = false\n        this.view.visualizeInputState()\n    }\n\n    isSquareSelectEnabled() {\n        return this.state.squareSelectEnabled\n    }\n\n    addExtension(extensionClass, props) {\n        if (this.getExtension(extensionClass)) {\n            throw Error(\"extension \\\"\" + extensionClass.name + \"\\\" already added\")\n        }\n        this.extensions.push(new extensionClass(this, props))\n    }\n\n    getExtension(extensionClass) {\n        for (const extension of this.extensions) {\n            if (extension instanceof extensionClass) {\n                return extension\n            }\n        }\n        return null\n    }\n\n    destroy() {\n        this.state.invokeExtensionPoints(EXTENSION_POINT.destroy)\n        this.positionAnimationsQueue.destroy()\n        this.view.destroy()\n        this.view = undefined\n        this.state = undefined\n    }\n\n}\n","/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nexport const WHITE = 'w';\nexport const BLACK = 'b';\nexport const PAWN = 'p';\nexport const KNIGHT = 'n';\nexport const BISHOP = 'b';\nexport const ROOK = 'r';\nexport const QUEEN = 'q';\nexport const KING = 'k';\nexport const DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nconst EMPTY = -1;\nconst FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q',\n};\n// prettier-ignore\nexport const SQUARES = [\n    'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n    'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n    'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n    'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n    'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n    'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n    'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n    'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n];\nconst BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64,\n};\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\nconst PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15],\n};\nconst PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\n};\n// prettier-ignore\nconst ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20\n];\n// prettier-ignore\nconst RAYS = [\n    17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,\n    0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,\n    0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,\n    0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,\n    0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,\n    0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,\n    0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,\n    0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,\n    0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,\n    -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17\n];\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 };\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst SIDES = {\n    [KING]: BITS.KSIDE_CASTLE,\n    [QUEEN]: BITS.QSIDE_CASTLE,\n};\nconst ROOKS = {\n    w: [\n        { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n    ],\n    b: [\n        { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n    ],\n};\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 };\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n    return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n    return square & 0xf;\n}\nfunction isDigit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n    const f = file(square);\n    const r = rank(square);\n    return ('abcdefgh'.substring(f, f + 1) +\n        '87654321'.substring(r, r + 1));\n}\nfunction swapColor(color) {\n    return color === WHITE ? BLACK : WHITE;\n}\nexport function validateFen(fen) {\n    // 1st criterion: 6 space-seperated fields?\n    const tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: must contain six space-delimited fields',\n        };\n    }\n    // 2nd criterion: move number field is a integer value > 0?\n    const moveNumber = parseInt(tokens[5], 10);\n    if (isNaN(moveNumber) || moveNumber <= 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: move number must be a positive integer',\n        };\n    }\n    // 3rd criterion: half move counter is an integer >= 0?\n    const halfMoves = parseInt(tokens[4], 10);\n    if (isNaN(halfMoves) || halfMoves < 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: half move counter number must be a non-negative integer',\n        };\n    }\n    // 4th criterion: 4th field is a valid e.p.-string?\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n        return { ok: false, error: 'Invalid FEN: en-passant square is invalid' };\n    }\n    // 5th criterion: 3th field is a valid castle-string?\n    if (/[^kKqQ-]/.test(tokens[2])) {\n        return { ok: false, error: 'Invalid FEN: castling availability is invalid' };\n    }\n    // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n    if (!/^(w|b)$/.test(tokens[1])) {\n        return { ok: false, error: 'Invalid FEN: side-to-move is invalid' };\n    }\n    // 7th criterion: 1st field contains 8 rows?\n    const rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n        return {\n            ok: false,\n            error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n        };\n    }\n    // 8th criterion: every row is valid?\n    for (let i = 0; i < rows.length; i++) {\n        // check for right sum of fields AND not two numbers in succession\n        let sumFields = 0;\n        let previousWasNumber = false;\n        for (let k = 0; k < rows[i].length; k++) {\n            if (isDigit(rows[i][k])) {\n                if (previousWasNumber) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (consecutive number)',\n                    };\n                }\n                sumFields += parseInt(rows[i][k], 10);\n                previousWasNumber = true;\n            }\n            else {\n                if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (invalid piece)',\n                    };\n                }\n                sumFields += 1;\n                previousWasNumber = false;\n            }\n        }\n        if (sumFields !== 8) {\n            return {\n                ok: false,\n                error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n            };\n        }\n    }\n    // 9th criterion: is en-passant square legal?\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\n        return { ok: false, error: 'Invalid FEN: illegal en-passant square' };\n    }\n    // 10th criterion: does chess position contain exact two kings?\n    const kings = [\n        { color: 'white', regex: /K/g },\n        { color: 'black', regex: /k/g },\n    ];\n    for (const { color, regex } of kings) {\n        if (!regex.test(tokens[0])) {\n            return { ok: false, error: `Invalid FEN: missing ${color} king` };\n        }\n        if ((tokens[0].match(regex) || []).length > 1) {\n            return { ok: false, error: `Invalid FEN: too many ${color} kings` };\n        }\n    }\n    // 11th criterion: are any pawns on the first or eighth rows?\n    if (Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: some pawns are on the edge rows',\n        };\n    }\n    return { ok: true };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n    const from = move.from;\n    const to = move.to;\n    const piece = move.piece;\n    let ambiguities = 0;\n    let sameRank = 0;\n    let sameFile = 0;\n    for (let i = 0, len = moves.length; i < len; i++) {\n        const ambigFrom = moves[i].from;\n        const ambigTo = moves[i].to;\n        const ambigPiece = moves[i].piece;\n        /*\n         * if a move of the same piece type ends on the same to square, we'll need\n         * to add a disambiguator to the algebraic notation\n         */\n        if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n            ambiguities++;\n            if (rank(from) === rank(ambigFrom)) {\n                sameRank++;\n            }\n            if (file(from) === file(ambigFrom)) {\n                sameFile++;\n            }\n        }\n    }\n    if (ambiguities > 0) {\n        if (sameRank > 0 && sameFile > 0) {\n            /*\n             * if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            return algebraic(from);\n        }\n        else if (sameFile > 0) {\n            /*\n             * if the moving piece rests on the same file, use the rank symbol as the\n             * disambiguator\n             */\n            return algebraic(from).charAt(1);\n        }\n        else {\n            // else use the file symbol\n            return algebraic(from).charAt(0);\n        }\n    }\n    return '';\n}\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\n    const r = rank(to);\n    if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n        for (let i = 0; i < PROMOTIONS.length; i++) {\n            const promotion = PROMOTIONS[i];\n            moves.push({\n                color,\n                from,\n                to,\n                piece,\n                captured,\n                promotion,\n                flags: flags | BITS.PROMOTION,\n            });\n        }\n    }\n    else {\n        moves.push({\n            color,\n            from,\n            to,\n            piece,\n            captured,\n            flags,\n        });\n    }\n}\nfunction inferPieceType(san) {\n    let pieceType = san.charAt(0);\n    if (pieceType >= 'a' && pieceType <= 'h') {\n        const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n        if (matches) {\n            return undefined;\n        }\n        return PAWN;\n    }\n    pieceType = pieceType.toLowerCase();\n    if (pieceType === 'o') {\n        return KING;\n    }\n    return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nfunction trimFen(fen) {\n    /*\n     * remove last two fields in FEN string as they're not needed when checking\n     * for repetition\n     */\n    return fen.split(' ').slice(0, 4).join(' ');\n}\nexport class Chess {\n    _board = new Array(128);\n    _turn = WHITE;\n    _header = {};\n    _kings = { w: EMPTY, b: EMPTY };\n    _epSquare = -1;\n    _halfMoves = 0;\n    _moveNumber = 0;\n    _history = [];\n    _comments = {};\n    _castling = { w: 0, b: 0 };\n    // tracks number of times a position has been seen for repetition checking\n    _positionCount = {};\n    constructor(fen = DEFAULT_POSITION) {\n        this.load(fen);\n    }\n    clear({ preserveHeaders = false } = {}) {\n        this._board = new Array(128);\n        this._kings = { w: EMPTY, b: EMPTY };\n        this._turn = WHITE;\n        this._castling = { w: 0, b: 0 };\n        this._epSquare = EMPTY;\n        this._halfMoves = 0;\n        this._moveNumber = 1;\n        this._history = [];\n        this._comments = {};\n        this._header = preserveHeaders ? this._header : {};\n        this._positionCount = {};\n        /*\n         * Delete the SetUp and FEN headers (if preserved), the board is empty and\n         * these headers don't make sense in this state. They'll get added later\n         * via .load() or .put()\n         */\n        delete this._header['SetUp'];\n        delete this._header['FEN'];\n    }\n    removeHeader(key) {\n        if (key in this._header) {\n            delete this._header[key];\n        }\n    }\n    load(fen, { skipValidation = false, preserveHeaders = false } = {}) {\n        let tokens = fen.split(/\\s+/);\n        // append commonly omitted fen tokens\n        if (tokens.length >= 2 && tokens.length < 6) {\n            const adjustments = ['-', '-', '0', '1'];\n            fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n        }\n        tokens = fen.split(/\\s+/);\n        if (!skipValidation) {\n            const { ok, error } = validateFen(fen);\n            if (!ok) {\n                throw new Error(error);\n            }\n        }\n        const position = tokens[0];\n        let square = 0;\n        this.clear({ preserveHeaders });\n        for (let i = 0; i < position.length; i++) {\n            const piece = position.charAt(i);\n            if (piece === '/') {\n                square += 8;\n            }\n            else if (isDigit(piece)) {\n                square += parseInt(piece, 10);\n            }\n            else {\n                const color = piece < 'a' ? WHITE : BLACK;\n                this._put({ type: piece.toLowerCase(), color }, algebraic(square));\n                square++;\n            }\n        }\n        this._turn = tokens[1];\n        if (tokens[2].indexOf('K') > -1) {\n            this._castling.w |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            this._castling.w |= BITS.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            this._castling.b |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            this._castling.b |= BITS.QSIDE_CASTLE;\n        }\n        this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n        this._halfMoves = parseInt(tokens[4], 10);\n        this._moveNumber = parseInt(tokens[5], 10);\n        this._updateSetup(fen);\n        this._incPositionCount(fen);\n    }\n    fen() {\n        let empty = 0;\n        let fen = '';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i]) {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                const { color, type: piece } = this._board[i];\n                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n            }\n            else {\n                empty++;\n            }\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n                if (i !== Ox88.h1) {\n                    fen += '/';\n                }\n                empty = 0;\n                i += 8;\n            }\n        }\n        let castling = '';\n        if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n            castling += 'K';\n        }\n        if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n            castling += 'Q';\n        }\n        if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n            castling += 'k';\n        }\n        if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n            castling += 'q';\n        }\n        // do we have an empty castling flag?\n        castling = castling || '-';\n        let epSquare = '-';\n        /*\n         * only print the ep square if en passant is a valid move (pawn is present\n         * and ep capture is not pinned)\n         */\n        if (this._epSquare !== EMPTY) {\n            const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n            const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n            for (const square of squares) {\n                // is the square off the board?\n                if (square & 0x88) {\n                    continue;\n                }\n                const color = this._turn;\n                // is there a pawn that can capture the epSquare?\n                if (this._board[square]?.color === color &&\n                    this._board[square]?.type === PAWN) {\n                    // if the pawn makes an ep capture, does it leave it's king in check?\n                    this._makeMove({\n                        color,\n                        from: square,\n                        to: this._epSquare,\n                        piece: PAWN,\n                        captured: PAWN,\n                        flags: BITS.EP_CAPTURE,\n                    });\n                    const isLegal = !this._isKingAttacked(color);\n                    this._undoMove();\n                    // if ep is legal, break and set the ep square in the FEN output\n                    if (isLegal) {\n                        epSquare = algebraic(this._epSquare);\n                        break;\n                    }\n                }\n            }\n        }\n        return [\n            fen,\n            this._turn,\n            castling,\n            epSquare,\n            this._halfMoves,\n            this._moveNumber,\n        ].join(' ');\n    }\n    /*\n     * Called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object. If the FEN\n     * is equal to the default position, the SetUp and FEN are deleted the setup\n     * is only updated if history.length is zero, ie moves haven't been made.\n     */\n    _updateSetup(fen) {\n        if (this._history.length > 0)\n            return;\n        if (fen !== DEFAULT_POSITION) {\n            this._header['SetUp'] = '1';\n            this._header['FEN'] = fen;\n        }\n        else {\n            delete this._header['SetUp'];\n            delete this._header['FEN'];\n        }\n    }\n    reset() {\n        this.load(DEFAULT_POSITION);\n    }\n    get(square) {\n        return this._board[Ox88[square]] || false;\n    }\n    put({ type, color }, square) {\n        if (this._put({ type, color }, square)) {\n            this._updateCastlingRights();\n            this._updateEnPassantSquare();\n            this._updateSetup(this.fen());\n            return true;\n        }\n        return false;\n    }\n    _put({ type, color }, square) {\n        // check for piece\n        if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n            return false;\n        }\n        // check for valid square\n        if (!(square in Ox88)) {\n            return false;\n        }\n        const sq = Ox88[square];\n        // don't let the user place more than one king\n        if (type == KING &&\n            !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n            return false;\n        }\n        const currentPieceOnSquare = this._board[sq];\n        // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n        if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n            this._kings[currentPieceOnSquare.color] = EMPTY;\n        }\n        this._board[sq] = { type: type, color: color };\n        if (type === KING) {\n            this._kings[color] = sq;\n        }\n        return true;\n    }\n    remove(square) {\n        const piece = this.get(square);\n        delete this._board[Ox88[square]];\n        if (piece && piece.type === KING) {\n            this._kings[piece.color] = EMPTY;\n        }\n        this._updateCastlingRights();\n        this._updateEnPassantSquare();\n        this._updateSetup(this.fen());\n        return piece;\n    }\n    _updateCastlingRights() {\n        const whiteKingInPlace = this._board[Ox88.e1]?.type === KING &&\n            this._board[Ox88.e1]?.color === WHITE;\n        const blackKingInPlace = this._board[Ox88.e8]?.type === KING &&\n            this._board[Ox88.e8]?.color === BLACK;\n        if (!whiteKingInPlace ||\n            this._board[Ox88.a1]?.type !== ROOK ||\n            this._board[Ox88.a1]?.color !== WHITE) {\n            this._castling.w &= ~BITS.QSIDE_CASTLE;\n        }\n        if (!whiteKingInPlace ||\n            this._board[Ox88.h1]?.type !== ROOK ||\n            this._board[Ox88.h1]?.color !== WHITE) {\n            this._castling.w &= ~BITS.KSIDE_CASTLE;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.a8]?.type !== ROOK ||\n            this._board[Ox88.a8]?.color !== BLACK) {\n            this._castling.b &= ~BITS.QSIDE_CASTLE;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.h8]?.type !== ROOK ||\n            this._board[Ox88.h8]?.color !== BLACK) {\n            this._castling.b &= ~BITS.KSIDE_CASTLE;\n        }\n    }\n    _updateEnPassantSquare() {\n        if (this._epSquare === EMPTY) {\n            return;\n        }\n        const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);\n        const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        const attackers = [currentSquare + 1, currentSquare - 1];\n        if (this._board[startSquare] !== null ||\n            this._board[this._epSquare] !== null ||\n            this._board[currentSquare]?.color !== swapColor(this._turn) ||\n            this._board[currentSquare]?.type !== PAWN) {\n            this._epSquare = EMPTY;\n            return;\n        }\n        const canCapture = (square) => !(square & 0x88) &&\n            this._board[square]?.color === this._turn &&\n            this._board[square]?.type === PAWN;\n        if (!attackers.some(canCapture)) {\n            this._epSquare = EMPTY;\n        }\n    }\n    _attacked(color, square) {\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // did we run off the end of the board\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            // if empty square or wrong color\n            if (this._board[i] === undefined || this._board[i].color !== color) {\n                continue;\n            }\n            const piece = this._board[i];\n            const difference = i - square;\n            // skip - to/from square are the same\n            if (difference === 0) {\n                continue;\n            }\n            const index = difference + 119;\n            if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n                if (piece.type === PAWN) {\n                    if (difference > 0) {\n                        if (piece.color === WHITE)\n                            return true;\n                    }\n                    else {\n                        if (piece.color === BLACK)\n                            return true;\n                    }\n                    continue;\n                }\n                // if the piece is a knight or a king\n                if (piece.type === 'n' || piece.type === 'k')\n                    return true;\n                const offset = RAYS[index];\n                let j = i + offset;\n                let blocked = false;\n                while (j !== square) {\n                    if (this._board[j] != null) {\n                        blocked = true;\n                        break;\n                    }\n                    j += offset;\n                }\n                if (!blocked)\n                    return true;\n            }\n        }\n        return false;\n    }\n    _isKingAttacked(color) {\n        const square = this._kings[color];\n        return square === -1 ? false : this._attacked(swapColor(color), square);\n    }\n    isAttacked(square, attackedBy) {\n        return this._attacked(attackedBy, Ox88[square]);\n    }\n    isCheck() {\n        return this._isKingAttacked(this._turn);\n    }\n    inCheck() {\n        return this.isCheck();\n    }\n    isCheckmate() {\n        return this.isCheck() && this._moves().length === 0;\n    }\n    isStalemate() {\n        return !this.isCheck() && this._moves().length === 0;\n    }\n    isInsufficientMaterial() {\n        /*\n         * k.b. vs k.b. (of opposite colors) with mate in 1:\n         * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n         *\n         * k.b. vs k.n. with mate in 1:\n         * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n         */\n        const pieces = {\n            b: 0,\n            n: 0,\n            r: 0,\n            q: 0,\n            k: 0,\n            p: 0,\n        };\n        const bishops = [];\n        let numPieces = 0;\n        let squareColor = 0;\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            squareColor = (squareColor + 1) % 2;\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            const piece = this._board[i];\n            if (piece) {\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n                if (piece.type === BISHOP) {\n                    bishops.push(squareColor);\n                }\n                numPieces++;\n            }\n        }\n        // k vs. k\n        if (numPieces === 2) {\n            return true;\n        }\n        else if (\n        // k vs. kn .... or .... k vs. kb\n        numPieces === 3 &&\n            (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n            return true;\n        }\n        else if (numPieces === pieces[BISHOP] + 2) {\n            // kb vs. kb where any number of bishops are all on the same color\n            let sum = 0;\n            const len = bishops.length;\n            for (let i = 0; i < len; i++) {\n                sum += bishops[i];\n            }\n            if (sum === 0 || sum === len) {\n                return true;\n            }\n        }\n        return false;\n    }\n    isThreefoldRepetition() {\n        return this._getPositionCount(this.fen()) >= 3;\n    }\n    isDraw() {\n        return (this._halfMoves >= 100 || // 50 moves per side = 100 half moves\n            this.isStalemate() ||\n            this.isInsufficientMaterial() ||\n            this.isThreefoldRepetition());\n    }\n    isGameOver() {\n        return this.isCheckmate() || this.isStalemate() || this.isDraw();\n    }\n    moves({ verbose = false, square = undefined, piece = undefined, } = {}) {\n        const moves = this._moves({ square, piece });\n        if (verbose) {\n            return moves.map((move) => this._makePretty(move));\n        }\n        else {\n            return moves.map((move) => this._moveToSan(move, moves));\n        }\n    }\n    _moves({ legal = true, piece = undefined, square = undefined, } = {}) {\n        const forSquare = square ? square.toLowerCase() : undefined;\n        const forPiece = piece?.toLowerCase();\n        const moves = [];\n        const us = this._turn;\n        const them = swapColor(us);\n        let firstSquare = Ox88.a8;\n        let lastSquare = Ox88.h1;\n        let singleSquare = false;\n        // are we generating moves for a single square?\n        if (forSquare) {\n            // illegal square, return empty moves\n            if (!(forSquare in Ox88)) {\n                return [];\n            }\n            else {\n                firstSquare = lastSquare = Ox88[forSquare];\n                singleSquare = true;\n            }\n        }\n        for (let from = firstSquare; from <= lastSquare; from++) {\n            // did we run off the end of the board\n            if (from & 0x88) {\n                from += 7;\n                continue;\n            }\n            // empty square or opponent, skip\n            if (!this._board[from] || this._board[from].color === them) {\n                continue;\n            }\n            const { type } = this._board[from];\n            let to;\n            if (type === PAWN) {\n                if (forPiece && forPiece !== type)\n                    continue;\n                // single square, non-capturing\n                to = from + PAWN_OFFSETS[us][0];\n                if (!this._board[to]) {\n                    addMove(moves, us, from, to, PAWN);\n                    // double square\n                    to = from + PAWN_OFFSETS[us][1];\n                    if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n                        addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n                    }\n                }\n                // pawn captures\n                for (let j = 2; j < 4; j++) {\n                    to = from + PAWN_OFFSETS[us][j];\n                    if (to & 0x88)\n                        continue;\n                    if (this._board[to]?.color === them) {\n                        addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n                    }\n                    else if (to === this._epSquare) {\n                        addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n                    }\n                }\n            }\n            else {\n                if (forPiece && forPiece !== type)\n                    continue;\n                for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n                    const offset = PIECE_OFFSETS[type][j];\n                    to = from;\n                    while (true) {\n                        to += offset;\n                        if (to & 0x88)\n                            break;\n                        if (!this._board[to]) {\n                            addMove(moves, us, from, to, type);\n                        }\n                        else {\n                            // own color, stop loop\n                            if (this._board[to].color === us)\n                                break;\n                            addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n                            break;\n                        }\n                        /* break, if knight or king */\n                        if (type === KNIGHT || type === KING)\n                            break;\n                    }\n                }\n            }\n        }\n        /*\n         * check for castling if we're:\n         *   a) generating all moves, or\n         *   b) doing single square move generation on the king's square\n         */\n        if (forPiece === undefined || forPiece === KING) {\n            if (!singleSquare || lastSquare === this._kings[us]) {\n                // king-side castling\n                if (this._castling[us] & BITS.KSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom + 2;\n                    if (!this._board[castlingFrom + 1] &&\n                        !this._board[castlingTo] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom + 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n                    }\n                }\n                // queen-side castling\n                if (this._castling[us] & BITS.QSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom - 2;\n                    if (!this._board[castlingFrom - 1] &&\n                        !this._board[castlingFrom - 2] &&\n                        !this._board[castlingFrom - 3] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom - 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n                    }\n                }\n            }\n        }\n        /*\n         * return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal || this._kings[us] === -1) {\n            return moves;\n        }\n        // filter out illegal moves\n        const legalMoves = [];\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(us)) {\n                legalMoves.push(moves[i]);\n            }\n            this._undoMove();\n        }\n        return legalMoves;\n    }\n    move(move, { strict = false } = {}) {\n        /*\n         * The move function can be called with in the following parameters:\n         *\n         * .move('Nxb7')       <- argument is a case-sensitive SAN string\n         *\n         * .move({ from: 'h7', <- argument is a move object\n         *         to :'h8',\n         *         promotion: 'q' })\n         *\n         *\n         * An optional strict argument may be supplied to tell chess.js to\n         * strictly follow the SAN specification.\n         */\n        let moveObj = null;\n        if (typeof move === 'string') {\n            moveObj = this._moveFromSan(move, strict);\n        }\n        else if (typeof move === 'object') {\n            const moves = this._moves();\n            // convert the pretty move object to an ugly move object\n            for (let i = 0, len = moves.length; i < len; i++) {\n                if (move.from === algebraic(moves[i].from) &&\n                    move.to === algebraic(moves[i].to) &&\n                    (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n                    moveObj = moves[i];\n                    break;\n                }\n            }\n        }\n        // failed to find move\n        if (!moveObj) {\n            if (typeof move === 'string') {\n                throw new Error(`Invalid move: ${move}`);\n            }\n            else {\n                throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n            }\n        }\n        /*\n         * need to make a copy of move because we can't generate SAN after the move\n         * is made\n         */\n        const prettyMove = this._makePretty(moveObj);\n        this._makeMove(moveObj);\n        this._incPositionCount(prettyMove.after);\n        return prettyMove;\n    }\n    _push(move) {\n        this._history.push({\n            move,\n            kings: { b: this._kings.b, w: this._kings.w },\n            turn: this._turn,\n            castling: { b: this._castling.b, w: this._castling.w },\n            epSquare: this._epSquare,\n            halfMoves: this._halfMoves,\n            moveNumber: this._moveNumber,\n        });\n    }\n    _makeMove(move) {\n        const us = this._turn;\n        const them = swapColor(us);\n        this._push(move);\n        this._board[move.to] = this._board[move.from];\n        delete this._board[move.from];\n        // if ep capture, remove the captured pawn\n        if (move.flags & BITS.EP_CAPTURE) {\n            if (this._turn === BLACK) {\n                delete this._board[move.to - 16];\n            }\n            else {\n                delete this._board[move.to + 16];\n            }\n        }\n        // if pawn promotion, replace with new piece\n        if (move.promotion) {\n            this._board[move.to] = { type: move.promotion, color: us };\n        }\n        // if we moved the king\n        if (this._board[move.to].type === KING) {\n            this._kings[us] = move.to;\n            // if we castled, move the rook next to the king\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                const castlingTo = move.to - 1;\n                const castlingFrom = move.to + 1;\n                this._board[castlingTo] = this._board[castlingFrom];\n                delete this._board[castlingFrom];\n            }\n            else if (move.flags & BITS.QSIDE_CASTLE) {\n                const castlingTo = move.to + 1;\n                const castlingFrom = move.to - 2;\n                this._board[castlingTo] = this._board[castlingFrom];\n                delete this._board[castlingFrom];\n            }\n            // turn off castling\n            this._castling[us] = 0;\n        }\n        // turn off castling if we move a rook\n        if (this._castling[us]) {\n            for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n                if (move.from === ROOKS[us][i].square &&\n                    this._castling[us] & ROOKS[us][i].flag) {\n                    this._castling[us] ^= ROOKS[us][i].flag;\n                    break;\n                }\n            }\n        }\n        // turn off castling if we capture a rook\n        if (this._castling[them]) {\n            for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n                if (move.to === ROOKS[them][i].square &&\n                    this._castling[them] & ROOKS[them][i].flag) {\n                    this._castling[them] ^= ROOKS[them][i].flag;\n                    break;\n                }\n            }\n        }\n        // if big pawn move, update the en passant square\n        if (move.flags & BITS.BIG_PAWN) {\n            if (us === BLACK) {\n                this._epSquare = move.to - 16;\n            }\n            else {\n                this._epSquare = move.to + 16;\n            }\n        }\n        else {\n            this._epSquare = EMPTY;\n        }\n        // reset the 50 move counter if a pawn is moved or a piece is captured\n        if (move.piece === PAWN) {\n            this._halfMoves = 0;\n        }\n        else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n            this._halfMoves = 0;\n        }\n        else {\n            this._halfMoves++;\n        }\n        if (us === BLACK) {\n            this._moveNumber++;\n        }\n        this._turn = them;\n    }\n    undo() {\n        const move = this._undoMove();\n        if (move) {\n            const prettyMove = this._makePretty(move);\n            this._decPositionCount(prettyMove.after);\n            return prettyMove;\n        }\n        return null;\n    }\n    _undoMove() {\n        const old = this._history.pop();\n        if (old === undefined) {\n            return null;\n        }\n        const move = old.move;\n        this._kings = old.kings;\n        this._turn = old.turn;\n        this._castling = old.castling;\n        this._epSquare = old.epSquare;\n        this._halfMoves = old.halfMoves;\n        this._moveNumber = old.moveNumber;\n        const us = this._turn;\n        const them = swapColor(us);\n        this._board[move.from] = this._board[move.to];\n        this._board[move.from].type = move.piece; // to undo any promotions\n        delete this._board[move.to];\n        if (move.captured) {\n            if (move.flags & BITS.EP_CAPTURE) {\n                // en passant capture\n                let index;\n                if (us === BLACK) {\n                    index = move.to - 16;\n                }\n                else {\n                    index = move.to + 16;\n                }\n                this._board[index] = { type: PAWN, color: them };\n            }\n            else {\n                // regular capture\n                this._board[move.to] = { type: move.captured, color: them };\n            }\n        }\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n            let castlingTo, castlingFrom;\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                castlingTo = move.to + 1;\n                castlingFrom = move.to - 1;\n            }\n            else {\n                castlingTo = move.to - 2;\n                castlingFrom = move.to + 1;\n            }\n            this._board[castlingTo] = this._board[castlingFrom];\n            delete this._board[castlingFrom];\n        }\n        return move;\n    }\n    pgn({ newline = '\\n', maxWidth = 0, } = {}) {\n        /*\n         * using the specification from http://www.chessclub.com/help/PGN-spec\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n         */\n        const result = [];\n        let headerExists = false;\n        /* add the PGN header information */\n        for (const i in this._header) {\n            /*\n             * TODO: order of enumerated properties in header object is not\n             * guaranteed, see ECMA-262 spec (section 12.6.4)\n             */\n            result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline);\n            headerExists = true;\n        }\n        if (headerExists && this._history.length) {\n            result.push(newline);\n        }\n        const appendComment = (moveString) => {\n            const comment = this._comments[this.fen()];\n            if (typeof comment !== 'undefined') {\n                const delimiter = moveString.length > 0 ? ' ' : '';\n                moveString = `${moveString}${delimiter}{${comment}}`;\n            }\n            return moveString;\n        };\n        // pop all of history onto reversed_history\n        const reversedHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        const moves = [];\n        let moveString = '';\n        // special case of a commented starting position with no moves\n        if (reversedHistory.length === 0) {\n            moves.push(appendComment(''));\n        }\n        // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n        while (reversedHistory.length > 0) {\n            moveString = appendComment(moveString);\n            const move = reversedHistory.pop();\n            // make TypeScript stop complaining about move being undefined\n            if (!move) {\n                break;\n            }\n            // if the position started with black to move, start PGN with #. ...\n            if (!this._history.length && move.color === 'b') {\n                const prefix = `${this._moveNumber}. ...`;\n                // is there a comment preceding the first move?\n                moveString = moveString ? `${moveString} ${prefix}` : prefix;\n            }\n            else if (move.color === 'w') {\n                // store the previous generated move_string if we have one\n                if (moveString.length) {\n                    moves.push(moveString);\n                }\n                moveString = this._moveNumber + '.';\n            }\n            moveString =\n                moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }));\n            this._makeMove(move);\n        }\n        // are there any other leftover moves?\n        if (moveString.length) {\n            moves.push(appendComment(moveString));\n        }\n        // is there a result?\n        if (typeof this._header.Result !== 'undefined') {\n            moves.push(this._header.Result);\n        }\n        /*\n         * history should be back to what it was before we started generating PGN,\n         * so join together moves\n         */\n        if (maxWidth === 0) {\n            return result.join('') + moves.join(' ');\n        }\n        // TODO (jah): huh?\n        const strip = function () {\n            if (result.length > 0 && result[result.length - 1] === ' ') {\n                result.pop();\n                return true;\n            }\n            return false;\n        };\n        // NB: this does not preserve comment whitespace.\n        const wrapComment = function (width, move) {\n            for (const token of move.split(' ')) {\n                if (!token) {\n                    continue;\n                }\n                if (width + token.length > maxWidth) {\n                    while (strip()) {\n                        width--;\n                    }\n                    result.push(newline);\n                    width = 0;\n                }\n                result.push(token);\n                width += token.length;\n                result.push(' ');\n                width++;\n            }\n            if (strip()) {\n                width--;\n            }\n            return width;\n        };\n        // wrap the PGN output at max_width\n        let currentWidth = 0;\n        for (let i = 0; i < moves.length; i++) {\n            if (currentWidth + moves[i].length > maxWidth) {\n                if (moves[i].includes('{')) {\n                    currentWidth = wrapComment(currentWidth, moves[i]);\n                    continue;\n                }\n            }\n            // if the current move will push past max_width\n            if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n                // don't end the line with whitespace\n                if (result[result.length - 1] === ' ') {\n                    result.pop();\n                }\n                result.push(newline);\n                currentWidth = 0;\n            }\n            else if (i !== 0) {\n                result.push(' ');\n                currentWidth++;\n            }\n            result.push(moves[i]);\n            currentWidth += moves[i].length;\n        }\n        return result.join('');\n    }\n    header(...args) {\n        for (let i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n                this._header[args[i]] = args[i + 1];\n            }\n        }\n        return this._header;\n    }\n    loadPgn(pgn, { strict = false, newlineChar = '\\r?\\n', } = {}) {\n        function mask(str) {\n            return str.replace(/\\\\/g, '\\\\');\n        }\n        function parsePgnHeader(header) {\n            const headerObj = {};\n            const headers = header.split(new RegExp(mask(newlineChar)));\n            let key = '';\n            let value = '';\n            for (let i = 0; i < headers.length; i++) {\n                const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/;\n                key = headers[i].replace(regex, '$1');\n                value = headers[i].replace(regex, '$2');\n                if (key.trim().length > 0) {\n                    headerObj[key] = value;\n                }\n            }\n            return headerObj;\n        }\n        // strip whitespace from head/tail of PGN block\n        pgn = pgn.trim();\n        /*\n         * RegExp to split header. Takes advantage of the fact that header and movetext\n         * will always have a blank line between them (ie, two newline_char's). Handles\n         * case where movetext is empty by matching newlineChar until end of string is\n         * matched - effectively trimming from the end extra newlineChar.\n         *\n         * With default newline_char, will equal:\n         * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n         */\n        const headerRegex = new RegExp('^(\\\\[((?:' +\n            mask(newlineChar) +\n            ')|.)*\\\\])' +\n            '((?:\\\\s*' +\n            mask(newlineChar) +\n            '){2}|(?:\\\\s*' +\n            mask(newlineChar) +\n            ')*$)');\n        // If no header given, begin with moves.\n        const headerRegexResults = headerRegex.exec(pgn);\n        const headerString = headerRegexResults\n            ? headerRegexResults.length >= 2\n                ? headerRegexResults[1]\n                : ''\n            : '';\n        // Put the board in the starting position\n        this.reset();\n        // parse PGN header\n        const headers = parsePgnHeader(headerString);\n        let fen = '';\n        for (const key in headers) {\n            // check to see user is including fen (possibly with wrong tag case)\n            if (key.toLowerCase() === 'fen') {\n                fen = headers[key];\n            }\n            this.header(key, headers[key]);\n        }\n        /*\n         * the permissive parser should attempt to load a fen tag, even if it's the\n         * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n         */\n        if (!strict) {\n            if (fen) {\n                this.load(fen, { preserveHeaders: true });\n            }\n        }\n        else {\n            /*\n             * strict parser - load the starting position indicated by [Setup '1']\n             * and [FEN position]\n             */\n            if (headers['SetUp'] === '1') {\n                if (!('FEN' in headers)) {\n                    throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n                }\n                // don't clear the headers when loading\n                this.load(headers['FEN'], { preserveHeaders: true });\n            }\n        }\n        /*\n         * NB: the regexes below that delete move numbers, recursive annotations,\n         * and numeric annotation glyphs may also match text in comments. To\n         * prevent this, we transform comments by hex-encoding them in place and\n         * decoding them again after the other tokens have been deleted.\n         *\n         * While the spec states that PGN files should be ASCII encoded, we use\n         * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n         * for modern users\n         */\n        function toHex(s) {\n            return Array.from(s)\n                .map(function (c) {\n                /*\n                 * encodeURI doesn't transform most ASCII characters, so we handle\n                 * these ourselves\n                 */\n                return c.charCodeAt(0) < 128\n                    ? c.charCodeAt(0).toString(16)\n                    : encodeURIComponent(c).replace(/%/g, '').toLowerCase();\n            })\n                .join('');\n        }\n        function fromHex(s) {\n            return s.length == 0\n                ? ''\n                : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'));\n        }\n        const encodeComment = function (s) {\n            s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ');\n            return `{${toHex(s.slice(1, s.length - 1))}}`;\n        };\n        const decodeComment = function (s) {\n            if (s.startsWith('{') && s.endsWith('}')) {\n                return fromHex(s.slice(1, s.length - 1));\n            }\n        };\n        // delete header to get the moves\n        let ms = pgn\n            .replace(headerString, '')\n            .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'), function (_match, bracket, semicolon) {\n            return bracket !== undefined\n                ? encodeComment(bracket)\n                : ' ' + encodeComment(`{${semicolon.slice(1)}}`);\n        })\n            .replace(new RegExp(mask(newlineChar), 'g'), ' ');\n        // delete recursive annotation variations\n        const ravRegex = /(\\([^()]+\\))+?/g;\n        while (ravRegex.test(ms)) {\n            ms = ms.replace(ravRegex, '');\n        }\n        // delete move numbers\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n        // delete ... indicating black to move\n        ms = ms.replace(/\\.\\.\\./g, '');\n        /* delete numeric annotation glyphs */\n        ms = ms.replace(/\\$\\d+/g, '');\n        // trim and get array of moves\n        let moves = ms.trim().split(new RegExp(/\\s+/));\n        // delete empty entries\n        moves = moves.filter((move) => move !== '');\n        let result = '';\n        for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n            const comment = decodeComment(moves[halfMove]);\n            if (comment !== undefined) {\n                this._comments[this.fen()] = comment;\n                continue;\n            }\n            const move = this._moveFromSan(moves[halfMove], strict);\n            // invalid move\n            if (move == null) {\n                // was the move an end of game marker\n                if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n                    result = moves[halfMove];\n                }\n                else {\n                    throw new Error(`Invalid move in PGN: ${moves[halfMove]}`);\n                }\n            }\n            else {\n                // reset the end of game marker if making a valid move\n                result = '';\n                this._makeMove(move);\n                this._incPositionCount(this.fen());\n            }\n        }\n        /*\n         * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n         * the termination marker. Only do this when headers are present, but the\n         * result tag is missing\n         */\n        if (result && Object.keys(this._header).length && !this._header['Result']) {\n            this.header('Result', result);\n        }\n    }\n    /*\n     * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} strict Use the strict SAN parser. It will throw errors\n     * on overly disambiguated moves (see below):\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    _moveToSan(move, moves) {\n        let output = '';\n        if (move.flags & BITS.KSIDE_CASTLE) {\n            output = 'O-O';\n        }\n        else if (move.flags & BITS.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        }\n        else {\n            if (move.piece !== PAWN) {\n                const disambiguator = getDisambiguator(move, moves);\n                output += move.piece.toUpperCase() + disambiguator;\n            }\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n                if (move.piece === PAWN) {\n                    output += algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n            output += algebraic(move.to);\n            if (move.promotion) {\n                output += '=' + move.promotion.toUpperCase();\n            }\n        }\n        this._makeMove(move);\n        if (this.isCheck()) {\n            if (this.isCheckmate()) {\n                output += '#';\n            }\n            else {\n                output += '+';\n            }\n        }\n        this._undoMove();\n        return output;\n    }\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    _moveFromSan(move, strict = false) {\n        // strip off any move decorations: e.g Nf3+?! becomes Nf3\n        const cleanMove = strippedSan(move);\n        let pieceType = inferPieceType(cleanMove);\n        let moves = this._moves({ legal: true, piece: pieceType });\n        // strict parser\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n                return moves[i];\n            }\n        }\n        // the strict parser failed\n        if (strict) {\n            return null;\n        }\n        let piece = undefined;\n        let matches = undefined;\n        let from = undefined;\n        let to = undefined;\n        let promotion = undefined;\n        /*\n         * The default permissive (non-strict) parser allows the user to parse\n         * non-standard chess notations. This parser is only run after the strict\n         * Standard Algebraic Notation (SAN) parser has failed.\n         *\n         * When running the permissive parser, we'll run a regex to grab the piece, the\n         * to/from square, and an optional promotion piece. This regex will\n         * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n         * f7f8q, b1c3\n         *\n         * NOTE: Some positions and moves may be ambiguous when using the permissive\n         * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n         * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n         * move). In these cases, the permissive parser will default to the most\n         * basic interpretation (which is b1c3 parsing to Nc3).\n         */\n        let overlyDisambiguated = false;\n        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n        if (matches) {\n            piece = matches[1];\n            from = matches[2];\n            to = matches[3];\n            promotion = matches[4];\n            if (from.length == 1) {\n                overlyDisambiguated = true;\n            }\n        }\n        else {\n            /*\n             * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n             * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n             * there is one legal knight move to e7). In this case, the value of\n             * 'from' variable will be a rank or file, not a square.\n             */\n            matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n            if (matches) {\n                piece = matches[1];\n                from = matches[2];\n                to = matches[3];\n                promotion = matches[4];\n                if (from.length == 1) {\n                    overlyDisambiguated = true;\n                }\n            }\n        }\n        pieceType = inferPieceType(cleanMove);\n        moves = this._moves({\n            legal: true,\n            piece: piece ? piece : pieceType,\n        });\n        if (!to) {\n            return null;\n        }\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (!from) {\n                // if there is no from square, it could be just 'x' missing from a capture\n                if (cleanMove ===\n                    strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\n                    return moves[i];\n                }\n                // hand-compare move properties with the results from our permissive regex\n            }\n            else if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                Ox88[from] == moves[i].from &&\n                Ox88[to] == moves[i].to &&\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                return moves[i];\n            }\n            else if (overlyDisambiguated) {\n                /*\n                 * SPECIAL CASE: we parsed a move string that may have an unneeded\n                 * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n                 */\n                const square = algebraic(moves[i].from);\n                if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                    Ox88[to] == moves[i].to &&\n                    (from == square[0] || from == square[1]) &&\n                    (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                    return moves[i];\n                }\n            }\n        }\n        return null;\n    }\n    ascii() {\n        let s = '   +------------------------+\\n';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // display the rank\n            if (file(i) === 0) {\n                s += ' ' + '87654321'[rank(i)] + ' |';\n            }\n            if (this._board[i]) {\n                const piece = this._board[i].type;\n                const color = this._board[i].color;\n                const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n                s += ' ' + symbol + ' ';\n            }\n            else {\n                s += ' . ';\n            }\n            if ((i + 1) & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+\\n';\n        s += '     a  b  c  d  e  f  g  h';\n        return s;\n    }\n    perft(depth) {\n        const moves = this._moves({ legal: false });\n        let nodes = 0;\n        const color = this._turn;\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(color)) {\n                if (depth - 1 > 0) {\n                    nodes += this.perft(depth - 1);\n                }\n                else {\n                    nodes++;\n                }\n            }\n            this._undoMove();\n        }\n        return nodes;\n    }\n    // pretty = external move object\n    _makePretty(uglyMove) {\n        const { color, piece, from, to, flags, captured, promotion } = uglyMove;\n        let prettyFlags = '';\n        for (const flag in BITS) {\n            if (BITS[flag] & flags) {\n                prettyFlags += FLAGS[flag];\n            }\n        }\n        const fromAlgebraic = algebraic(from);\n        const toAlgebraic = algebraic(to);\n        const move = {\n            color,\n            piece,\n            from: fromAlgebraic,\n            to: toAlgebraic,\n            san: this._moveToSan(uglyMove, this._moves({ legal: true })),\n            flags: prettyFlags,\n            lan: fromAlgebraic + toAlgebraic,\n            before: this.fen(),\n            after: '',\n        };\n        // generate the FEN for the 'after' key\n        this._makeMove(uglyMove);\n        move.after = this.fen();\n        this._undoMove();\n        if (captured) {\n            move.captured = captured;\n        }\n        if (promotion) {\n            move.promotion = promotion;\n            move.lan += promotion;\n        }\n        return move;\n    }\n    turn() {\n        return this._turn;\n    }\n    board() {\n        const output = [];\n        let row = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i] == null) {\n                row.push(null);\n            }\n            else {\n                row.push({\n                    square: algebraic(i),\n                    type: this._board[i].type,\n                    color: this._board[i].color,\n                });\n            }\n            if ((i + 1) & 0x88) {\n                output.push(row);\n                row = [];\n                i += 8;\n            }\n        }\n        return output;\n    }\n    squareColor(square) {\n        if (square in Ox88) {\n            const sq = Ox88[square];\n            return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n        }\n        return null;\n    }\n    history({ verbose = false } = {}) {\n        const reversedHistory = [];\n        const moveHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            if (verbose) {\n                moveHistory.push(this._makePretty(move));\n            }\n            else {\n                moveHistory.push(this._moveToSan(move, this._moves()));\n            }\n            this._makeMove(move);\n        }\n        return moveHistory;\n    }\n    /*\n     * Keeps track of position occurrence counts for the purpose of repetition\n     * checking. All three methods (`_inc`, `_dec`, and `_get`) trim the\n     * irrelevent information from the fen, initialising new positions, and\n     * removing old positions from the record if their counts are reduced to 0.\n     */\n    _getPositionCount(fen) {\n        const trimmedFen = trimFen(fen);\n        return this._positionCount[trimmedFen] || 0;\n    }\n    _incPositionCount(fen) {\n        const trimmedFen = trimFen(fen);\n        if (this._positionCount[trimmedFen] === undefined) {\n            this._positionCount[trimmedFen] = 0;\n        }\n        this._positionCount[trimmedFen] += 1;\n    }\n    _decPositionCount(fen) {\n        const trimmedFen = trimFen(fen);\n        if (this._positionCount[trimmedFen] === 1) {\n            delete this._positionCount[trimmedFen];\n        }\n        else {\n            this._positionCount[trimmedFen] -= 1;\n        }\n    }\n    _pruneComments() {\n        const reversedHistory = [];\n        const currentComments = {};\n        const copyComment = (fen) => {\n            if (fen in this._comments) {\n                currentComments[fen] = this._comments[fen];\n            }\n        };\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        copyComment(this.fen());\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            this._makeMove(move);\n            copyComment(this.fen());\n        }\n        this._comments = currentComments;\n    }\n    getComment() {\n        return this._comments[this.fen()];\n    }\n    setComment(comment) {\n        this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n    }\n    deleteComment() {\n        const comment = this._comments[this.fen()];\n        delete this._comments[this.fen()];\n        return comment;\n    }\n    getComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            return { fen: fen, comment: this._comments[fen] };\n        });\n    }\n    deleteComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            const comment = this._comments[fen];\n            delete this._comments[fen];\n            return { fen: fen, comment: comment };\n        });\n    }\n    setCastlingRights(color, rights) {\n        for (const side of [KING, QUEEN]) {\n            if (rights[side] !== undefined) {\n                if (rights[side]) {\n                    this._castling[color] |= SIDES[side];\n                }\n                else {\n                    this._castling[color] &= ~SIDES[side];\n                }\n            }\n        }\n        this._updateCastlingRights();\n        const result = this.getCastlingRights(color);\n        return ((rights[KING] === undefined || rights[KING] === result[KING]) &&\n            (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]));\n    }\n    getCastlingRights(color) {\n        return {\n            [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n            [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n        };\n    }\n    moveNumber() {\n        return this._moveNumber;\n    }\n}\n//# sourceMappingURL=chess.js.map","import { Chessboard, COLOR, INPUT_EVENT_TYPE } from 'cm-chessboard';\nimport { Chess } from 'chess.js';\n\nexport class ChessGame {\n    constructor(element) {\n        this.chess = new Chess();\n        this.board = new Chessboard(element, {\n            position: this.chess.fen(),\n            assetsUrl: 'assets/',\n            style: {\n                showCoordinates: true,\n                borderType: 'thin',\n                pieces: {\n                    file: 'pieces/standard.svg',\n                }\n            }\n        });\n        \n        this.initializeGame();\n    }\n\n    initializeGame() {\n        this.board.enableMoveInput(this.inputHandler.bind(this));\n    }\n\n    inputHandler(event) {\n        switch (event.type) {\n            case INPUT_EVENT_TYPE.moveInputStarted:\n                return true;\n            \n            case INPUT_EVENT_TYPE.validateMoveInput:\n                const move = {\n                    from: event.squareFrom,\n                    to: event.squareTo\n                };\n                \n                // Check if move is legal\n                const result = this.chess.move(move);\n                if (result) {\n                    this.board.setPosition(this.chess.fen());\n                    this.updateStatus();\n                    return true;\n                }\n                return false;\n        }\n    }\n\n    updateStatus() {\n        const status = document.getElementById('status');\n        let statusText = '';\n\n        if (this.chess.isCheckmate()) {\n            statusText = 'Game Over - Checkmate!';\n        } else if (this.chess.isDraw()) {\n            statusText = 'Game Over - Draw!';\n        } else {\n            statusText = `Current turn: ${this.chess.turn() === 'w' ? 'White' : 'Black'}`;\n            if (this.chess.isCheck()) {\n                statusText += ' (Check)';\n            }\n        }\n        \n        status.textContent = statusText;\n    }\n\n    newGame() {\n        this.chess.reset();\n        this.board.setPosition(this.chess.fen());\n        this.updateStatus();\n    }\n\n    undoMove() {\n        this.chess.undo();\n        this.board.setPosition(this.chess.fen());\n        this.updateStatus();\n    }\n}","import './styles/main.css';\nimport { ChessGame } from './components/Chessboard';\n\n// Initialize the game when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    const game = new ChessGame(document.getElementById('board'));\n\n    // Add event listeners for buttons\n    document.getElementById('startBtn').addEventListener('click', () => {\n        game.newGame();\n    });\n\n    document.getElementById('undoBtn').addEventListener('click', () => {\n        game.undoMove();\n    });\n});"],"names":["FEN","Position","constructor","fen","this","squares","Array","fill","setFen","parts","replace","split","part","row","str","numSpaces","parseInt","ret","i","c","char","substring","piece","toUpperCase","toLowerCase","getFen","spaceCounter","color","name","join","getPieces","pieceColor","undefined","pieceType","sortBy","pieces","sort","a","b","indexOf","type","charAt","square","indexToSquare","push","position","movePiece","squareFrom","squareTo","squareToIndex","console","warn","setPiece","getPiece","coordinates","squareToCoordinates","index","coordinatesToSquare","Math","floor","charCodeAt","String","fromCharCode","toString","clone","cloned","slice","ChessboardState","orientation","inputWhiteEnabled","inputBlackEnabled","squareSelectEnabled","moveInputCallback","extensionPoints","moveInputProcess","Promise","resolve","inputEnabled","invokeExtensionPoints","data","dataCloned","Object","assign","extensionPoint","returnValue","SVG_NAMESPACE","Svg","createSvg","containerElement","svg","document","createElementNS","setAttribute","appendChild","addElement","parent","attributes","element","attribute","hasOwnProperty","value","setAttributeNS","removeElement","parentNode","removeChild","EXTENSION_POINT","Utils","delegate","eventName","selector","handler","eventListener","event","target","matches","call","addEventListener","remove","removeEventListener","mergeObjects","source","isObject","obj","key","keys","createDomElement","html","template","createElement","innerHTML","trim","content","firstChild","createTask","reject","promise","_resolve","_reject","isAbsoluteUrl","url","startsWith","ANIMATION_EVENT_TYPE","PromiseQueue","queue","workingOnPromise","stop","enqueue","dequeue","entry","shift","then","catch","err","destroy","CHANGE_TYPE","PositionsAnimation","view","fromPosition","toPosition","duration","callback","animatedElements","createAnimation","frameHandle","requestAnimationFrame","animationStep","bind","error","positionsAnimationTask","chessboard","state","seekChanges","fromSquares","toSquares","appearedList","disappearedList","changes","previousSquare","newSquare","forEach","appeared","shortestDistance","foundMoved","disappeared","moveDistance","squareDistance","splice","atIndex","toIndex","change","animatedItem","getPieceElement","atPoint","indexToPoint","toPoint","drawPieceOnSquare","style","opacity","time","startTime","timeDiff","cancelAnimationFrame","t","min","progress","isNaN","transform","baseVal","removeItem","createSVGTransform","setTranslate","x","y","appendItem","round","index1","index2","file1","rank1","file2","rank2","max","abs","PositionAnimationsQueue","super","enqueuePositionChange","positionFrom","positionTo","animated","props","animationDuration","length","pow","redrawPieces","enqueueTurnBoard","emptyPosition","redrawBoard","MOVE_INPUT_STATE","waitForInputStart","pieceClickedThreshold","clickTo","secondClickThreshold","dragTo","clickDragTo","moveDone","reset","MOVE_CANCELED_REASON","VisualMoveInput","moveInputState","fromSquare","toSquare","setMoveInputState","moveInputStartedCallback","result","moveInputFinishedCallback","movingOverSquareCallback","validateMoveInputCallback","moveInputCanceledCallback","reason","newState","params","prevState","Error","pointerMoveListener","pointerUpListener","movedPiece","startPoint","point","onPointerMove","onPointerUp","contextMenuListener","onContextMenu","draggablePiece","setPieceVisibility","createDraggablePiece","hiddenPieces","piecesGroup","querySelectorAll","removeAttribute","pieceName","body","classList","add","squareWidth","squareHeight","spriteUrl","assetsCache","getSpriteUrl","href","scaling","tileSize","transformScale","setScale","moveDraggablePiece","onPointerDown","e","button","getAttribute","preventDefault","clientX","clientY","touches","startPieceName","startPieceColor","pageX","pageY","elementFromPoint","parentElement","boardGroup","changedTouches","moveStartSquare","isDragging","COLOR","INPUT_EVENT_TYPE","POINTER_EVENTS","BORDER_TYPE","ChessboardView","visualMoveInput","cacheSpriteToDiv","container","context","responsive","ResizeObserver","resizeObserver","setTimeout","handleResize","observe","resizeListener","window","pointerDownListener","pointerDownHandler","passive","createSvgAndGroups","unobserve","wrapperId","getElementById","wrapper","id","xhr","XMLHttpRequest","open","onload","insertAdjacentHTML","response","send","cssClass","borderType","updateMetrics","class","coordinatesGroup","markersLayer","piecesLayer","markersTopLayer","interactiveTopLayer","piecesTileSize","width","clientWidth","height","aspectRatio","borderSize","innerWidth","innerHeight","scalingX","scalingY","pieceXTranslate","clientHeight","redrawSquares","drawCoordinates","visualizeInputState","lastChild","innerPos","fieldClass","squareToPoint","squareRect","showCoordinates","inline","file","textElement","textContent","rank","childNodes","from","childNode","drawPiece","parentGroup","pieceGroup","pieceUse","hidden","transformTranslate","visible","querySelector","enableMoveInput","eventHandler","enabled","disableMoveInput","moveInputCallbackResult","legalMove","assetsUrl","PIECES_FILE_TYPE","Chessboard","random","extensions","positionAnimationsQueue","extensionData","addExtension","initialized","setPosition","setOrientation","boardTurning","getPosition","getOrientation","isMoveInputEnabled","enableSquareSelect","eventType","squareSelectListener","disableSquareSelect","isSquareSelectEnabled","extensionClass","getExtension","extension","WHITE","BLACK","PAWN","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","EMPTY","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","PIECE_MASKS","p","PROMOTIONS","SIDES","ROOKS","flag","SECOND_RANK","TERMINATION_MARKERS","isDigit","algebraic","f","swapColor","addMove","moves","to","captured","flags","promotion","inferPieceType","san","match","strippedSan","move","trimFen","Chess","_board","_turn","_header","_kings","_epSquare","_halfMoves","_moveNumber","_history","_comments","_castling","_positionCount","load","clear","preserveHeaders","removeHeader","skipValidation","tokens","adjustments","concat","ok","moveNumber","halfMoves","test","rows","sumFields","previousWasNumber","kings","regex","some","validateFen","_put","_updateSetup","_incPositionCount","empty","castling","epSquare","bigPawnSquare","_makeMove","isLegal","_isKingAttacked","_undoMove","get","put","_updateCastlingRights","_updateEnPassantSquare","sq","currentPieceOnSquare","whiteKingInPlace","blackKingInPlace","startSquare","currentSquare","attackers","_attacked","difference","offset","j","blocked","isAttacked","attackedBy","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","bishops","numPieces","squareColor","sum","len","isThreefoldRepetition","_getPositionCount","isDraw","isGameOver","verbose","map","_makePretty","_moveToSan","legal","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","JSON","stringify","prettyMove","after","_push","turn","undo","_decPositionCount","old","pop","pgn","newline","maxWidth","headerExists","appendComment","moveString","comment","reversedHistory","prefix","Result","strip","wrapComment","token","currentWidth","includes","header","args","loadPgn","newlineChar","mask","headerRegexResults","RegExp","exec","headerString","headers","headerObj","parsePgnHeader","encodeComment","s","encodeURIComponent","toHex","decodeComment","endsWith","decodeURIComponent","fromHex","ms","_match","bracket","semicolon","ravRegex","filter","halfMove","output","disambiguator","ambiguities","sameRank","sameFile","ambigFrom","ambigTo","getDisambiguator","cleanMove","overlyDisambiguated","ascii","perft","depth","nodes","uglyMove","prettyFlags","fromAlgebraic","toAlgebraic","lan","before","board","history","moveHistory","trimmedFen","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","getComments","deleteComments","setCastlingRights","rights","side","getCastlingRights","ChessGame","chess","initializeGame","inputHandler","updateStatus","status","statusText","newGame","undoMove","game"],"mappings":"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,EAAG,EAAG,EAChD,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAChD,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAChD,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAG1CC,GAAO,CACT,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAChD,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAChD,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EACpD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAA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"}